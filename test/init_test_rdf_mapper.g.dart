// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Generated on: 2025-06-07T11:27:43.454156

import 'package:rdf_mapper/rdf_mapper.dart';

import 'fixtures/annotation_test_models.rdf_mapper.g.rdf_mapper.g.dart' as rdf_mapper_generator;
import 'fixtures/annotation_test_models.dart' as rdf_mapper_generator2;
import 'fixtures/global_resource_processor_test_models.rdf_mapper.g.rdf_mapper.g.dart' as rdf_mapper_generator3;
import 'fixtures/global_resource_processor_test_models.dart' as rdf_mapper_generator4;

/// Initializes and returns an RdfMapper with test mappers registered.
/// 
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
/// Provider parameters:
/// * [baseUriProvider] {+baseUri}
/// IRI mapper parameters:
/// * [testMapper] IRI mapper of type IriTermMapper<rdf_mapper_generator4.ClassWithIriNamedMapperStrategy>
RdfMapper initTestRdfMapper({
  RdfMapper? rdfMapper,
  // Provider parameters
  required String Function() baseUriProvider,
  // IRI mapper parameters
  required IriTermMapper<rdf_mapper_generator4.ClassWithIriNamedMapperStrategy> testMapper,
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  registry.registerMapper<rdf_mapper_generator2.BookWithMapper>(
    rdf_mapper_generator.BookWithMapperMapper(
      iriMapper: const rdf_mapper_generator2.TestMapper(prefix: 'https://example.org/books'),
    )
  );
  registry.registerMapper<rdf_mapper_generator2.BookWithTemplate>(
    rdf_mapper_generator.BookWithTemplateMapper(
    )
  );
  registry.registerMapper<rdf_mapper_generator4.Book>(
    rdf_mapper_generator3.BookMapper(
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithEmptyIriStrategy>(
    rdf_mapper_generator3.ClassWithEmptyIriStrategyMapper(
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithIriTemplateStrategy>(
    rdf_mapper_generator3.ClassWithIriTemplateStrategyMapper(
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithIriTemplateAndContextVariableStrategy>(
    rdf_mapper_generator3.ClassWithIriTemplateAndContextVariableStrategyMapper(
      baseUriProvider: baseUriProvider,
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithIriNamedMapperStrategy>(
    rdf_mapper_generator3.ClassWithIriNamedMapperStrategyMapper(
      iriMapper: testMapper,
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithIriMapperStrategy>(
    rdf_mapper_generator3.ClassWithIriMapperStrategyMapper(
      iriMapper: rdf_mapper_generator4.TestIriMapper(),
    )
  );
  registry.registerMapper<rdf_mapper_generator4.ClassWithIriMapperInstanceStrategy>(
    rdf_mapper_generator3.ClassWithIriMapperInstanceStrategyMapper(
      iriMapper: const rdf_mapper_generator4.TestIriMapper(),
    )
  );
  
  return rdfMapper;
}
