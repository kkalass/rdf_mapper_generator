// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Generated on: 2025-06-07T12:52:27.017531

import 'package:rdf_mapper/rdf_mapper.dart';

import 'fixtures/annotation_test_models.rdf_mapper.g.rdf_mapper.g.dart' as annotation_test_models_rdf_mapper_g_rdf_mapper_g;
import 'fixtures/annotation_test_models.dart' as annotation_test_models;
import 'fixtures/global_resource_processor_test_models.rdf_mapper.g.rdf_mapper.g.dart' as global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g;
import 'fixtures/global_resource_processor_test_models.dart' as global_resource_processor_test_models;

/// Initializes and returns an RdfMapper with test mappers registered.
/// 
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
/// Provider parameters:
/// * [baseUriProvider] {+baseUri}
/// IRI mapper parameters:
/// * [testMapper] IRI mapper of type IriTermMapper<global_resource_processor_test_models.ClassWithIriNamedMapperStrategy>
RdfMapper initTestRdfMapper({
  RdfMapper? rdfMapper,
  // Provider parameters
  required String Function() baseUriProvider,
  // IRI mapper parameters
  required IriTermMapper<global_resource_processor_test_models.ClassWithIriNamedMapperStrategy> testMapper,
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  registry.registerMapper<annotation_test_models.BookWithMapper>(
    annotation_test_models_rdf_mapper_g_rdf_mapper_g.BookWithMapperMapper(
      iriMapper: const annotation_test_models.TestMapper(prefix: 'https://example.org/books'),
    )
  );
  registry.registerMapper<annotation_test_models.BookWithTemplate>(
    annotation_test_models_rdf_mapper_g_rdf_mapper_g.BookWithTemplateMapper(
    )
  );
  registry.registerMapper<global_resource_processor_test_models.Book>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.BookMapper(
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithEmptyIriStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithEmptyIriStrategyMapper(
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithIriTemplateStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithIriTemplateStrategyMapper(
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithIriTemplateAndContextVariableStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithIriTemplateAndContextVariableStrategyMapper(
      baseUriProvider: baseUriProvider,
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithIriNamedMapperStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithIriNamedMapperStrategyMapper(
      iriMapper: testMapper,
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithIriMapperStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithIriMapperStrategyMapper(
      iriMapper: global_resource_processor_test_models.TestIriMapper(),
    )
  );
  registry.registerMapper<global_resource_processor_test_models.ClassWithIriMapperInstanceStrategy>(
    global_resource_processor_test_models_rdf_mapper_g_rdf_mapper_g.ClassWithIriMapperInstanceStrategyMapper(
      iriMapper: const global_resource_processor_test_models.TestIriMapper(),
    )
  );
  
  return rdfMapper;
}
