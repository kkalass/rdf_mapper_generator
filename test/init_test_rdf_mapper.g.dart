// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Generated on: 2025-06-18T08:54:33.396289

import 'package:rdf_mapper/rdf_mapper.dart';

import 'fixtures/annotation_test_models.rdf_mapper.g.dart' as atmrmg;
import 'fixtures/annotation_test_models.dart' as atm;
import 'fixtures/global_resource_processor_test_models.rdf_mapper.g.dart' as grptmrmg;
import 'fixtures/global_resource_processor_test_models.dart' as grptm;
import 'fixtures/local_resource_processor_test_models.rdf_mapper.g.dart' as lrptmrmg;
import 'fixtures/local_resource_processor_test_models.dart' as lrptm;

/// Initializes and returns an RdfMapper with test mappers registered.
/// 
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
/// Provider parameters:
/// * [baseUriProvider] {+baseUri}
/// IRI mapper parameters:
/// * [testMapper] IRI mapper of type IriTermMapper<grptm.ClassWithIriNamedMapperStrategy>
RdfMapper initTestRdfMapper({
  RdfMapper? rdfMapper,
  // Provider parameters
  required String Function() baseUriProvider,
  // IRI mapper parameters
  required IriTermMapper<grptm.ClassWithIriNamedMapperStrategy> testMapper,
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  registry.registerMapper<atm.BookWithMapper>(
    atmrmg.BookWithMapperMapper(
      iriMapper: const atm.TestMapper(prefix: 'https://example.org/books'),
    )
  );
  registry.registerMapper<atm.BookWithTemplate>(
    atmrmg.BookWithTemplateMapper(
    )
  );
  registry.registerMapper<grptm.Book>(
    grptmrmg.BookMapper(
    )
  );
  registry.registerMapper<grptm.ClassWithEmptyIriStrategy>(
    grptmrmg.ClassWithEmptyIriStrategyMapper(
    )
  );
  registry.registerMapper<grptm.ClassWithIriTemplateStrategy>(
    grptmrmg.ClassWithIriTemplateStrategyMapper(
    )
  );
  registry.registerMapper<grptm.ClassWithIriTemplateAndContextVariableStrategy>(
    grptmrmg.ClassWithIriTemplateAndContextVariableStrategyMapper(
      baseUriProvider: baseUriProvider,
    )
  );
  registry.registerMapper<grptm.ClassWithIriNamedMapperStrategy>(
    grptmrmg.ClassWithIriNamedMapperStrategyMapper(
      iriMapper: testMapper,
    )
  );
  registry.registerMapper<grptm.ClassWithIriMapperStrategy>(
    grptmrmg.ClassWithIriMapperStrategyMapper(
      iriMapper: grptm.TestIriMapper(),
    )
  );
  registry.registerMapper<grptm.ClassWithIriMapperInstanceStrategy>(
    grptmrmg.ClassWithIriMapperInstanceStrategyMapper(
      iriMapper: const grptm.TestIriMapper2(),
    )
  );
  registry.registerMapper<lrptm.Book>(
    lrptmrmg.BookMapper(
    )
  );
  
  return rdfMapper;
}
