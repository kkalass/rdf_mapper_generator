// GENERATED CODE - DO NOT MODIFY BY HAND
// 
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/iri_processor_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'iri_processor_test_models.dart';

/// Generated mapper for [IriWithOnePart] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithOnePart.
class IriWithOnePartMapper implements IriTermMapper<IriWithOnePart> {

  static final RegExp _regex = RegExp('^http://example\.org/books/(?<isbn>[^/]*)\$');


  /// Constructor
  const IriWithOnePartMapper();

  @override
  IriWithOnePart fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithOnePart(
      isbn: iriParts['isbn']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithOnePart resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = 'http://example.org/books/{isbn}';
    iri = iri.replaceAll('{isbn}', resource.isbn.toString());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithOnePartExplicitlyGlobal] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithOnePartExplicitlyGlobal.
class IriWithOnePartExplicitlyGlobalMapper implements IriTermMapper<IriWithOnePartExplicitlyGlobal> {

  static final RegExp _regex = RegExp('^http://example\.org/books/(?<isbn>[^/]*)\$');


  /// Constructor
  const IriWithOnePartExplicitlyGlobalMapper();

  @override
  IriWithOnePartExplicitlyGlobal fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithOnePartExplicitlyGlobal(
      isbn: iriParts['isbn']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithOnePartExplicitlyGlobal resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = 'http://example.org/books/{isbn}';
    iri = iri.replaceAll('{isbn}', resource.isbn.toString());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithOnePartNamed] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithOnePartNamed.
class IriWithOnePartNamedMapper implements IriTermMapper<IriWithOnePartNamed> {

  static final RegExp _regex = RegExp('^http://example\.org/books/(?<isbn>[^/]*)\$');


  /// Constructor
  const IriWithOnePartNamedMapper();

  @override
  IriWithOnePartNamed fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithOnePartNamed(
      value: iriParts['isbn']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithOnePartNamed resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = 'http://example.org/books/{isbn}';
    iri = iri.replaceAll('{isbn}', resource.value.toString());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithTwoParts] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithTwoParts.
class IriWithTwoPartsMapper implements IriTermMapper<IriWithTwoParts> {

  static final RegExp _regex = RegExp('^http://example\.org/(?<type>[^/]*)/(?<value>[^/]*)\$');


  /// Constructor
  const IriWithTwoPartsMapper();

  @override
  IriWithTwoParts fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithTwoParts(
      value: iriParts['value']!,
      type: iriParts['type']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithTwoParts resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = 'http://example.org/{type}/{value}';
    iri = iri.replaceAll('{value}', resource.value.toString());
    iri = iri.replaceAll('{type}', resource.type.toString());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithBaseUriAndTwoParts] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithBaseUriAndTwoParts.
class IriWithBaseUriAndTwoPartsMapper implements IriTermMapper<IriWithBaseUriAndTwoParts> {

  static final RegExp _regex = RegExp('^(?<baseUri>.*)/(?<type>[^/]*)/(?<value>[^/]*)\$');

  /// Provider for context variable 'baseUri'
  final String Function() _baseUriProvider;

  /// Constructor requiring providers for context variables
  const IriWithBaseUriAndTwoPartsMapper({
    required String Function() baseUriProvider,
  }) : _baseUriProvider = baseUriProvider;

  @override
  IriWithBaseUriAndTwoParts fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithBaseUriAndTwoParts(
      value: iriParts['value']!,
      otherPart: iriParts['type']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithBaseUriAndTwoParts resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = '{+baseUri}/{type}/{value}';
    iri = iri.replaceAll('{value}', resource.value.toString());
    iri = iri.replaceAll('{type}', resource.otherPart.toString());
    iri = iri.replaceAll('{+baseUri}', _baseUriProvider());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithBaseUri] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithBaseUri.
class IriWithBaseUriMapper implements IriTermMapper<IriWithBaseUri> {

  static final RegExp _regex = RegExp('^(?<baseUri>.*)/books/(?<isbn>[^/]*)\$');

  /// Provider for context variable 'baseUri'
  final String Function() _baseUriProvider;

  /// Constructor requiring providers for context variables
  const IriWithBaseUriMapper({
    required String Function() baseUriProvider,
  }) : _baseUriProvider = baseUriProvider;

  @override
  IriWithBaseUri fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithBaseUri(
      isbn: iriParts['isbn']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithBaseUri resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = '{+baseUri}/books/{isbn}';
    iri = iri.replaceAll('{isbn}', resource.isbn.toString());
    iri = iri.replaceAll('{+baseUri}', _baseUriProvider());
    return IriTerm(iri);
  }
}


/// Generated mapper for [IriWithBaseUriNoGlobal] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type IriWithBaseUriNoGlobal.
class IriWithBaseUriNoGlobalMapper implements IriTermMapper<IriWithBaseUriNoGlobal> {

  static final RegExp _regex = RegExp('^(?<baseUri>.*)/books/(?<isbn>[^/]*)\$');

  /// Provider for context variable 'baseUri'
  final String Function() _baseUriProvider;

  /// Constructor requiring providers for context variables
  const IriWithBaseUriNoGlobalMapper({
    required String Function() baseUriProvider,
  }) : _baseUriProvider = baseUriProvider;

  @override
  IriWithBaseUriNoGlobal fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = match == null
        ? <String,String>{}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
    
    return IriWithBaseUriNoGlobal(
      isbn: iriParts['isbn']!
    );
  }

  @override
  IriTerm toRdfTerm(
    IriWithBaseUriNoGlobal resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    var iri = '{+baseUri}/books/{isbn}';
    iri = iri.replaceAll('{isbn}', resource.isbn.toString());
    iri = iri.replaceAll('{+baseUri}', _baseUriProvider());
    return IriTerm(iri);
  }
}


