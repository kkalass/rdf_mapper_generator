// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/valid_generic_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field, unnecessary_string_interpolations

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'valid_generic_test_models.dart';
import 'package:rdf_vocabularies_core/foaf.dart';
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [GenericDocument<T>] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `GenericDocument<T>`.
class GenericDocumentMapper<T>
    implements GlobalResourceMapper<GenericDocument<T>> {
  /// Constructor
  const GenericDocumentMapper();

  @override
  IriTerm? get typeIri => FoafDocument.classIri;

  @override
  GenericDocument<T> fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final documentIri = subject.value;
    final T primaryTopic = reader.require(FoafDocument.primaryTopic);
    final String title = reader.require(FoafDocument.title);

    return GenericDocument<T>(
      documentIri: documentIri,
      primaryTopic: primaryTopic,
      title: title,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    GenericDocument<T> resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(resource.documentIri);

    return context
        .resourceBuilder(subject)
        .addValue(FoafDocument.primaryTopic, resource.primaryTopic)
        .addValue(FoafDocument.title, resource.title)
        .build();
  }
}

/// Generated mapper for [MultiGenericDocument<T, U, V>] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `MultiGenericDocument<T, U, V>`.
class MultiGenericDocumentMapper<T, U, V>
    implements GlobalResourceMapper<MultiGenericDocument<T, U, V>> {
  /// Constructor
  const MultiGenericDocumentMapper();

  @override
  IriTerm? get typeIri => FoafDocument.classIri;

  @override
  MultiGenericDocument<T, U, V> fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final documentIri = subject.value;
    final T primaryTopic = reader.require(FoafDocument.primaryTopic);
    final U author = reader.require(SchemaCreativeWork.author);
    final V metadata = reader.require(SchemaCreativeWork.about);

    return MultiGenericDocument<T, U, V>(
      documentIri: documentIri,
      primaryTopic: primaryTopic,
      author: author,
      metadata: metadata,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    MultiGenericDocument<T, U, V> resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(resource.documentIri);

    return context
        .resourceBuilder(subject)
        .addValue(FoafDocument.primaryTopic, resource.primaryTopic)
        .addValue(SchemaCreativeWork.author, resource.author)
        .addValue(SchemaCreativeWork.about, resource.metadata)
        .build();
  }
}

/// Generated mapper for [NonGenericPerson] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `NonGenericPerson`.
class NonGenericPersonMapper implements GlobalResourceMapper<NonGenericPerson> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/persons/(?<id>[^/]*)$',
  );

  /// Constructor
  const NonGenericPersonMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  NonGenericPerson fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.value);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id'];
    if (id == null) {
      throw DeserializationException(
        'Missing required IRI part: id in IRI ${subject.value}',
      );
    }
    final String name = reader.require(SchemaPerson.name);

    return NonGenericPerson(id: id, name: name);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    NonGenericPerson resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(NonGenericPerson resource) {
    final id = resource.id;
    return 'http://example.org/persons/${id}';
  }
}

/// Generated mapper for [GenericLocalResource<T>] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `GenericLocalResource<T>`.
class GenericLocalResourceMapper<T>
    implements LocalResourceMapper<GenericLocalResource<T>> {
  /// Constructor
  const GenericLocalResourceMapper();

  @override
  IriTerm? get typeIri => FoafDocument.classIri;

  @override
  GenericLocalResource<T> fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final T value = reader.require(FoafDocument.primaryTopic);
    final String label = reader.require(SchemaThing.name);

    return GenericLocalResource<T>(value: value, label: label);
  }

  @override
  (BlankNodeTerm, Iterable<Triple>) toRdfResource(
    GenericLocalResource<T> resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(FoafDocument.primaryTopic, resource.value)
        .addValue(SchemaThing.name, resource.label)
        .build();
  }
}
