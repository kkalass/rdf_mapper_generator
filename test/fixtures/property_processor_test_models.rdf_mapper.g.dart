// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/property_processor_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'property_processor_test_models.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [SimplePropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type SimplePropertyTest.
class SimplePropertyTestMapper
    implements LocalResourceMapper<SimplePropertyTest> {
  /// Constructor
  const SimplePropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  SimplePropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaBook.name);

    return SimplePropertyTest(name: name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    SimplePropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.name)
        .build();
  }
}

/// Generated mapper for [SimpleCustomPropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type SimpleCustomPropertyTest.
class SimpleCustomPropertyTestMapper
    implements GlobalResourceMapper<SimpleCustomPropertyTest> {
  /// Constructor
  const SimpleCustomPropertyTestMapper();

  @override
  IriTerm? get typeIri =>
      const IriTerm.prevalidated('http://example.org/types/Book');

  @override
  SimpleCustomPropertyTest fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(
      const IriTerm.prevalidated('http://example.org/types/Book/name'),
    );

    return SimpleCustomPropertyTest(name: name);
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    SimpleCustomPropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(
          const IriTerm.prevalidated('http://example.org/types/Book/name'),
          resource.name,
        )
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(SimpleCustomPropertyTest resource) {
    final name = resource.name;
    return 'http://example.org/books/${name}';
  }
}

/// Generated mapper for [DeserializationOnlyPropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type DeserializationOnlyPropertyTest.
class DeserializationOnlyPropertyTestMapper
    implements LocalResourceMapper<DeserializationOnlyPropertyTest> {
  /// Constructor
  const DeserializationOnlyPropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  DeserializationOnlyPropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaBook.name);

    return DeserializationOnlyPropertyTest(name: name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    DeserializationOnlyPropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [OptionalPropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type OptionalPropertyTest.
class OptionalPropertyTestMapper
    implements LocalResourceMapper<OptionalPropertyTest> {
  /// Constructor
  const OptionalPropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  OptionalPropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String? name = reader.require(SchemaBook.name);

    return OptionalPropertyTest(name: name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    OptionalPropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValueIfNotNull(SchemaBook.name, resource.name)
        .build();
  }
}

/// Generated mapper for [DefaultValueTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type DefaultValueTest.
class DefaultValueTestMapper implements LocalResourceMapper<DefaultValueTest> {
  /// Constructor
  const DefaultValueTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  DefaultValueTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String isbn = reader.optional(SchemaBook.isbn) ?? 'default-isbn';

    return DefaultValueTest(isbn: isbn);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    DefaultValueTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.isbn, resource.isbn)
        .build();
  }
}

/// Generated mapper for [IncludeDefaultsTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type IncludeDefaultsTest.
class IncludeDefaultsTestMapper
    implements LocalResourceMapper<IncludeDefaultsTest> {
  /// Constructor
  const IncludeDefaultsTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  IncludeDefaultsTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final int rating = reader.optional(SchemaBook.numberOfPages) ?? 5;

    return IncludeDefaultsTest(rating: rating);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    IncludeDefaultsTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.numberOfPages, resource.rating)
        .build();
  }
}

/// Generated mapper for [IriMappingTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type IriMappingTest.
class IriMappingTestMapper implements LocalResourceMapper<IriMappingTest> {
  /// Constructor
  const IriMappingTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  IriMappingTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String authorId = reader.require(SchemaBook.author);

    return IriMappingTest(authorId: authorId);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    IriMappingTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authorId)
        .build();
  }
}

/// Generated mapper for [IriMappingNamedMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type IriMappingNamedMapperTest.
class IriMappingNamedMapperTestMapper
    implements LocalResourceMapper<IriMappingNamedMapperTest> {
  /// Constructor
  const IriMappingNamedMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  IriMappingNamedMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String authorId = reader.require(SchemaBook.author);

    return IriMappingNamedMapperTest(authorId: authorId);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    IriMappingNamedMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authorId)
        .build();
  }
}

/// Generated mapper for [IriMappingMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type IriMappingMapperTest.
class IriMappingMapperTestMapper
    implements LocalResourceMapper<IriMappingMapperTest> {
  /// Constructor
  const IriMappingMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  IriMappingMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String authorId = reader.require(SchemaBook.author);

    return IriMappingMapperTest(authorId: authorId);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    IriMappingMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authorId)
        .build();
  }
}

/// Generated mapper for [IriMappingMapperInstanceTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type IriMappingMapperInstanceTest.
class IriMappingMapperInstanceTestMapper
    implements LocalResourceMapper<IriMappingMapperInstanceTest> {
  /// Constructor
  const IriMappingMapperInstanceTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  IriMappingMapperInstanceTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String authorId = reader.require(SchemaBook.author);

    return IriMappingMapperInstanceTest(authorId: authorId);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    IriMappingMapperInstanceTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authorId)
        .build();
  }
}

/// Generated mapper for [LocalResourceMappingTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LocalResourceMappingTest.
class LocalResourceMappingTestMapper
    implements LocalResourceMapper<LocalResourceMappingTest> {
  /// Constructor
  const LocalResourceMappingTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LocalResourceMappingTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object author = reader.require(SchemaBook.author);

    return LocalResourceMappingTest(author: author);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LocalResourceMappingTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.author)
        .build();
  }
}

/// Generated mapper for [GlobalResourceMappingTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type GlobalResourceMappingTest.
class GlobalResourceMappingTestMapper
    implements LocalResourceMapper<GlobalResourceMappingTest> {
  /// Constructor
  const GlobalResourceMappingTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  GlobalResourceMappingTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object publisher = reader.require(SchemaBook.publisher);

    return GlobalResourceMappingTest(publisher: publisher);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    GlobalResourceMappingTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.publisher, resource.publisher)
        .build();
  }
}

/// Generated mapper for [LiteralMappingTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralMappingTest.
class LiteralMappingTestMapper
    implements LocalResourceMapper<LiteralMappingTest> {
  /// Constructor
  const LiteralMappingTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralMappingTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final double price = reader.require(
      const IriTerm.prevalidated('http://example.org/book/price'),
    );

    return LiteralMappingTest(price: price);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralMappingTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(
          const IriTerm.prevalidated('http://example.org/book/price'),
          resource.price,
        )
        .build();
  }
}

/// Generated mapper for [LiteralMappingTestCustomDatatype] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralMappingTestCustomDatatype.
class LiteralMappingTestCustomDatatypeMapper
    implements LocalResourceMapper<LiteralMappingTestCustomDatatype> {
  /// Constructor
  const LiteralMappingTestCustomDatatypeMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralMappingTestCustomDatatype fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final double price = reader.require(
      const IriTerm.prevalidated('http://example.org/book/price'),
    );

    return LiteralMappingTestCustomDatatype(price: price);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralMappingTestCustomDatatype resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(
          const IriTerm.prevalidated('http://example.org/book/price'),
          resource.price,
        )
        .build();
  }
}

/// Generated mapper for [CollectionNoneTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type CollectionNoneTest.
class CollectionNoneTestMapper
    implements LocalResourceMapper<CollectionNoneTest> {
  /// Constructor
  const CollectionNoneTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  CollectionNoneTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final List<String> authors = reader.require(SchemaBook.author);

    return CollectionNoneTest(authors: authors);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    CollectionNoneTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authors)
        .build();
  }
}

/// Generated mapper for [CollectionAutoTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type CollectionAutoTest.
class CollectionAutoTestMapper
    implements LocalResourceMapper<CollectionAutoTest> {
  /// Constructor
  const CollectionAutoTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  CollectionAutoTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final List<String> authors = reader.require(SchemaBook.author);

    return CollectionAutoTest(authors: authors);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    CollectionAutoTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authors)
        .build();
  }
}

/// Generated mapper for [CollectionTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type CollectionTest.
class CollectionTestMapper implements LocalResourceMapper<CollectionTest> {
  /// Constructor
  const CollectionTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  CollectionTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final List<String> authors = reader.require(SchemaBook.author);

    return CollectionTest(authors: authors);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    CollectionTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.authors)
        .build();
  }
}

/// Generated mapper for [MapNoCollectionTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type MapNoCollectionTest.
class MapNoCollectionTestMapper
    implements LocalResourceMapper<MapNoCollectionTest> {
  /// Constructor
  const MapNoCollectionTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  MapNoCollectionTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Map<String, String> reviews = reader.require(SchemaBook.reviews);

    return MapNoCollectionTest(reviews: reviews);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    MapNoCollectionTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.reviews, resource.reviews)
        .build();
  }
}

/// Generated mapper for [MapLocalResourceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type MapLocalResourceMapperTest.
class MapLocalResourceMapperTestMapper
    implements LocalResourceMapper<MapLocalResourceMapperTest> {
  /// Constructor
  const MapLocalResourceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  MapLocalResourceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Map<String, String> reviews = reader.require(SchemaBook.reviews);

    return MapLocalResourceMapperTest(reviews: reviews);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    MapLocalResourceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.reviews, resource.reviews)
        .build();
  }
}

/// Generated mapper for [SetTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type SetTest.
class SetTestMapper implements LocalResourceMapper<SetTest> {
  /// Constructor
  const SetTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  SetTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Set<String> keywords = reader.require(SchemaBook.keywords);

    return SetTest(keywords: keywords);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    SetTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.keywords, resource.keywords)
        .build();
  }
}

/// Generated mapper for [EnumTypeTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type EnumTypeTest.
class EnumTypeTestMapper implements LocalResourceMapper<EnumTypeTest> {
  /// Constructor
  const EnumTypeTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  EnumTypeTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final BookFormatType format = reader.require(SchemaBook.bookFormat);

    return EnumTypeTest(format: format);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    EnumTypeTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.bookFormat, resource.format)
        .build();
  }
}

/// Generated mapper for [ComplexDefaultValueTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ComplexDefaultValueTest.
class ComplexDefaultValueTestMapper
    implements LocalResourceMapper<ComplexDefaultValueTest> {
  /// Constructor
  const ComplexDefaultValueTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  ComplexDefaultValueTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Map<String, dynamic> complexValue =
        reader.optional(SchemaBook.isbn) ?? {'id': '1', 'name': 'Test'};

    return ComplexDefaultValueTest(complexValue: complexValue);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ComplexDefaultValueTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.isbn, resource.complexValue)
        .build();
  }
}

/// Generated mapper for [FinalPropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type FinalPropertyTest.
class FinalPropertyTestMapper
    implements LocalResourceMapper<FinalPropertyTest> {
  /// Constructor
  const FinalPropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  FinalPropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaBook.name);
    final String? description = reader.require(SchemaBook.description);

    return FinalPropertyTest(name: name, description: description);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    FinalPropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.name)
        .addValueIfNotNull(SchemaBook.description, resource.description)
        .build();
  }
}

/// Generated mapper for [LatePropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LatePropertyTest.
class LatePropertyTestMapper implements LocalResourceMapper<LatePropertyTest> {
  /// Constructor
  const LatePropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LatePropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaBook.name);
    final String? description = reader.optional(SchemaBook.description);

    final retval = LatePropertyTest();
    retval.name = name;
    retval.description = description;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LatePropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.name)
        .addValueIfNotNull(SchemaBook.description, resource.description)
        .build();
  }
}

/// Generated mapper for [MutablePropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type MutablePropertyTest.
class MutablePropertyTestMapper
    implements LocalResourceMapper<MutablePropertyTest> {
  /// Constructor
  const MutablePropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  MutablePropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaBook.name);
    final String? description = reader.optional(SchemaBook.description);

    return MutablePropertyTest(name: name, description: description);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    MutablePropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.name)
        .addValueIfNotNull(SchemaBook.description, resource.description)
        .build();
  }
}

/// Generated mapper for [LanguageTagTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LanguageTagTest.
class LanguageTagTestMapper implements LocalResourceMapper<LanguageTagTest> {
  /// Constructor
  const LanguageTagTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LanguageTagTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String description = reader.require(SchemaBook.description);

    return LanguageTagTest(description: description);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LanguageTagTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.description, resource.description)
        .build();
  }
}

/// Generated mapper for [DatatypeTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type DatatypeTest.
class DatatypeTestMapper implements LocalResourceMapper<DatatypeTest> {
  /// Constructor
  const DatatypeTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  DatatypeTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final DateTime date = reader.require(SchemaBook.dateCreated);

    return DatatypeTest(date: date);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    DatatypeTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.dateCreated, resource.date)
        .build();
  }
}

/// Generated mapper for [GlobalResourceNamedMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type GlobalResourceNamedMapperTest.
class GlobalResourceNamedMapperTestMapper
    implements LocalResourceMapper<GlobalResourceNamedMapperTest> {
  /// Constructor
  const GlobalResourceNamedMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  GlobalResourceNamedMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object publisher = reader.require(SchemaBook.publisher);

    return GlobalResourceNamedMapperTest(publisher: publisher);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    GlobalResourceNamedMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.publisher, resource.publisher)
        .build();
  }
}

/// Generated mapper for [LiteralNamedMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralNamedMapperTest.
class LiteralNamedMapperTestMapper
    implements LocalResourceMapper<LiteralNamedMapperTest> {
  /// Constructor
  const LiteralNamedMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralNamedMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String isbn = reader.require(SchemaBook.isbn);

    return LiteralNamedMapperTest(isbn: isbn);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralNamedMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.isbn, resource.isbn)
        .build();
  }
}

/// Generated mapper for [LiteralTypeMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralTypeMapperTest.
class LiteralTypeMapperTestMapper
    implements LocalResourceMapper<LiteralTypeMapperTest> {
  /// Constructor
  const LiteralTypeMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralTypeMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final double price = reader.require(SchemaBook.bookFormat);

    return LiteralTypeMapperTest(price: price);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralTypeMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.bookFormat, resource.price)
        .build();
  }
}

/// Generated mapper for [GlobalResourceTypeMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type GlobalResourceTypeMapperTest.
class GlobalResourceTypeMapperTestMapper
    implements LocalResourceMapper<GlobalResourceTypeMapperTest> {
  /// Constructor
  const GlobalResourceTypeMapperTestMapper();

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  GlobalResourceTypeMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Publisher publisher = reader.require(SchemaBook.publisher);

    return GlobalResourceTypeMapperTest(publisher: publisher);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    GlobalResourceTypeMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.publisher, resource.publisher)
        .build();
  }
}

/// Generated mapper for [GlobalResourceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type GlobalResourceMapperTest.
class GlobalResourceMapperTestMapper
    implements LocalResourceMapper<GlobalResourceMapperTest> {
  /// Constructor
  const GlobalResourceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  GlobalResourceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object publisher = reader.require(SchemaBook.publisher);

    return GlobalResourceMapperTest(publisher: publisher);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    GlobalResourceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.publisher, resource.publisher)
        .build();
  }
}

/// Generated mapper for [GlobalResourceInstanceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type GlobalResourceInstanceMapperTest.
class GlobalResourceInstanceMapperTestMapper
    implements LocalResourceMapper<GlobalResourceInstanceMapperTest> {
  /// Constructor
  const GlobalResourceInstanceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  GlobalResourceInstanceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object publisher = reader.require(SchemaBook.publisher);

    return GlobalResourceInstanceMapperTest(publisher: publisher);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    GlobalResourceInstanceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.publisher, resource.publisher)
        .build();
  }
}

/// Generated mapper for [LocalResourceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LocalResourceMapperTest.
class LocalResourceMapperTestMapper
    implements LocalResourceMapper<LocalResourceMapperTest> {
  /// Constructor
  const LocalResourceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LocalResourceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Author author = reader.require(SchemaBook.author);

    return LocalResourceMapperTest(author: author);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LocalResourceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.author)
        .build();
  }
}

/// Generated mapper for [LocalResourceMapperObjectPropertyTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LocalResourceMapperObjectPropertyTest.
class LocalResourceMapperObjectPropertyTestMapper
    implements LocalResourceMapper<LocalResourceMapperObjectPropertyTest> {
  /// Constructor
  const LocalResourceMapperObjectPropertyTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LocalResourceMapperObjectPropertyTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Object author = reader.require(SchemaBook.author);

    return LocalResourceMapperObjectPropertyTest(author: author);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LocalResourceMapperObjectPropertyTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.author)
        .build();
  }
}

/// Generated mapper for [LocalResourceInstanceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LocalResourceInstanceMapperTest.
class LocalResourceInstanceMapperTestMapper
    implements LocalResourceMapper<LocalResourceInstanceMapperTest> {
  /// Constructor
  const LocalResourceInstanceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LocalResourceInstanceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final Author author = reader.require(SchemaBook.author);

    return LocalResourceInstanceMapperTest(author: author);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LocalResourceInstanceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.author, resource.author)
        .build();
  }
}

/// Generated mapper for [LiteralMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralMapperTest.
class LiteralMapperTestMapper
    implements LocalResourceMapper<LiteralMapperTest> {
  /// Constructor
  const LiteralMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final int pageCount = reader.require(SchemaBook.numberOfPages);

    return LiteralMapperTest(pageCount: pageCount);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.numberOfPages, resource.pageCount)
        .build();
  }
}

/// Generated mapper for [LiteralInstanceMapperTest] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type LiteralInstanceMapperTest.
class LiteralInstanceMapperTestMapper
    implements LocalResourceMapper<LiteralInstanceMapperTest> {
  /// Constructor
  const LiteralInstanceMapperTestMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  LiteralInstanceMapperTest fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String isbn = reader.require(SchemaBook.isbn);

    return LiteralInstanceMapperTest(isbn: isbn);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    LiteralInstanceMapperTest resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.isbn, resource.isbn)
        .build();
  }
}
