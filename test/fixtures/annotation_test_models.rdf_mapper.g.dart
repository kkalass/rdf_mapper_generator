// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/annotation_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'annotation_test_models.dart';
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [String] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type `String`.
class BookWithMapperTitleMapper implements IriTermMapper<String> {
  static final RegExp _regex = RegExp(
    r'^https://example\.org/books/(?<id>[^/]*)/(?<title>[^/]*)$',
  );

  final String Function() _idProvider;

  /// Constructor
  const BookWithMapperTitleMapper({required String Function() idProvider})
    : _idProvider = idProvider;

  @override
  String fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    return iriParts['title']!;
  }

  @override
  IriTerm toRdfTerm(
    String iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final title = iriTermValue.toString();
    final id = _idProvider();
    return IriTerm('https://example.org/books/${id}/${title}');
  }
}

/// Generated mapper for [BookWithMapper] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapper.
class BookWithMapperMapper implements GlobalResourceMapper<BookWithMapper> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const BookWithMapperMapper({
    IriTermMapper<(String id,)> iriMapper = const TestMapper(
      prefix: 'https://example.org/books',
    ),
  }) : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  BookWithMapper fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title =
        reader.optional(
          SchemaBook.name,
          deserializer: BookWithMapperTitleMapper(
            idProvider: () =>
                throw Exception('Must not call provider for deserialization'),
          ),
        ) ??
        'Untitled';

    return BookWithMapper(id: id, title: title);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    BookWithMapper resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .when(
          resource.title != 'Untitled',
          (b) => b.addValue(
            SchemaBook.name,
            resource.title,
            serializer: BookWithMapperTitleMapper(
              idProvider: () => resource.id,
            ),
          ),
        )
        .build();
  }
}

/// Generated mapper for [BookWithMapperInstance] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapperInstance.
class BookWithMapperInstanceMapper
    implements GlobalResourceMapper<BookWithMapperInstance> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const BookWithMapperInstanceMapper({
    IriTermMapper<(String id,)> iriMapper = const TestMapper(
      prefix: 'https://example.org/books',
    ),
  }) : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  BookWithMapperInstance fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    return BookWithMapperInstance(id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    BookWithMapperInstance resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [BookWithTemplate] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithTemplate.
class BookWithTemplateMapper implements GlobalResourceMapper<BookWithTemplate> {
  static final RegExp _regex = RegExp(
    r'^https://example\.org/books/(?<id>[^/]*)$',
  );

  /// Constructor
  const BookWithTemplateMapper();

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  BookWithTemplate fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id']!;

    return BookWithTemplate(id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    BookWithTemplate resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context.resourceBuilder(subject).build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(BookWithTemplate resource) {
    final id = resource.id;
    return 'https://example.org/books/${id}';
  }
}
