// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/annotation_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'annotation_test_models.dart';
import 'package:rdf_vocabularies/schema.dart' as schema;

/// Generated mapper for [BookWithMapper] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapper.
class BookWithMapperMapper implements GlobalResourceMapper<BookWithMapper> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const BookWithMapperMapper({required IriTermMapper<(String id,)> iriMapper})
    : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => schema.SchemaBook.classIri;

  @override
  BookWithMapper fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    // Extract IRI parts
    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title = reader.optional(schema.SchemaBook.name) ?? 'Untitled';

    return BookWithMapper(id: id, title: title);
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithMapper resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .addValue(schema.SchemaBook.name, resource.title)
        .build();
  }
}

/// Generated mapper for [BookWithMapperInstance] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapperInstance.
class BookWithMapperInstanceMapper
    implements GlobalResourceMapper<BookWithMapperInstance> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const BookWithMapperInstanceMapper({
    required IriTermMapper<(String id,)> iriMapper,
  }) : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => schema.SchemaBook.classIri;

  @override
  BookWithMapperInstance fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    // Extract IRI parts
    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    return BookWithMapperInstance(id);
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithMapperInstance resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [BookWithTemplate] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithTemplate.
class BookWithTemplateMapper implements GlobalResourceMapper<BookWithTemplate> {
  static final RegExp _regex = RegExp(
    '^https://example\.org/books/(?<id>[^/]*)\$',
  );

  /// Constructor
  const BookWithTemplateMapper();

  @override
  IriTerm? get typeIri => schema.SchemaBook.classIri;

  @override
  BookWithTemplate fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    // Extract IRI parts
    final iriParts = _parseIriParts(subject.iri);

    final id = iriParts['id']!;

    return BookWithTemplate(id);
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithTemplate resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context.resourceBuilder(subject).build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(BookWithTemplate resource) {
    var iri = 'https://example.org/books/{id}';
    iri = iri.replaceAll('{id}', resource.id.toString());
    return iri;
  }

  /// Parses IRI parts from a complete IRI using a template.
  ///
  /// Supports RFC 6570 URI Template standard:
  /// - {variable} (default): excludes reserved characters like '/'
  /// - {+variable}: includes reserved characters for URLs/paths (RFC 6570 Level 2)
  Map<String, String> _parseIriParts(String iri) {
    // Try to match the IRI against the regex pattern
    RegExpMatch? match = _regex.firstMatch(iri);

    return match == null
        ? {}
        : Map.fromEntries(
            match.groupNames.map((name) {
              var namedGroup = match.namedGroup(name)!;
              return MapEntry(name, namedGroup);
            }),
          );
  }
}
