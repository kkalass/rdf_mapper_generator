// GENERATED CODE - DO NOT MODIFY BY HAND
// 
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/annotation_test_models.dart
// Generated on: 2025-06-03T06:36:49.140145

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [BookWithMapper] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapper.
class BookWithMapperMapper implements GlobalResourceMapper<BookWithMapper> {
  @override
  IriTerm get typeIri => SchemaBook.classIri;

  @override
  BookWithMapper fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    
    final title = reader.require<String>(SchemaBook.name);

    return BookWithMapper(
      id: id,
      title: title,
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithMapper resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    
    builder.addValue(SchemaBook.name, resource.title);

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [BookWithMapperInstance] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithMapperInstance.
class BookWithMapperInstanceMapper implements GlobalResourceMapper<BookWithMapperInstance> {
  @override
  IriTerm get typeIri => SchemaBook.classIri;

  @override
  BookWithMapperInstance fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return BookWithMapperInstance(
      id: id,
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithMapperInstance resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [BookWithTemplate] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type BookWithTemplate.
class BookWithTemplateMapper implements GlobalResourceMapper<BookWithTemplate> {
  @override
  IriTerm get typeIri => SchemaBook.classIri;

  @override
  BookWithTemplate fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    final iriTemplate = 'https://example.org/books/{id}';
    final iriParts = _parseIriParts(subject.value, iriTemplate);
    
    final id = iriParts['id'];

    return BookWithTemplate(
      id: id,
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    BookWithTemplate resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(BookWithTemplate resource) {
    var iri = 'https://example.org/books/{id}';
    iri = iri.replaceAll('', resource..toString());
    return iri;
  }

  /// Parses IRI parts from a complete IRI using the template.
  Map<String, String> _parseIriParts(String iri, String template) {
    final parts = <String, String>{};
    // Simple template parsing - in practice, this would be more sophisticated
    // Extract  from IRI
    final Pattern = RegExp(r'');
    final Match = Pattern.firstMatch(iri);
    if (Match != null) {
      parts[''] = Match.group(1)!;
    }
    return parts;
  }
}


