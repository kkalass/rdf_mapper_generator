// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/directional_mapper_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field, unnecessary_string_interpolations

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'directional_mapper_test_models.dart';

/// Generated mapper for [DeserializeOnlyClass] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `DeserializeOnlyClass`.
class DeserializeOnlyClassMapper
    implements GlobalResourceDeserializer<DeserializeOnlyClass> {
  /// Constructor
  const DeserializeOnlyClassMapper();

  @override
  IriTerm? get typeIri =>
      const IriTerm('http://example.org/DeserializeOnlyClass');

  @override
  DeserializeOnlyClass fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(
      const IriTerm('http://example.org/name'),
    );
    final int value = reader.require(const IriTerm('http://example.org/value'));

    return DeserializeOnlyClass(name: name, value: value);
  }
}

/// Generated mapper for [SerializeOnlyClass] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `SerializeOnlyClass`.
class SerializeOnlyClassMapper
    implements GlobalResourceSerializer<SerializeOnlyClass> {
  /// Constructor
  const SerializeOnlyClassMapper();

  @override
  IriTerm? get typeIri =>
      const IriTerm('http://example.org/SerializeOnlyClass');

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    SerializeOnlyClass resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(const IriTerm('http://example.org/title'), resource.title)
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(SerializeOnlyClass resource) {
    final id = resource.id;
    return 'http://example.org/items/${id}';
  }
}

/// Generated mapper for [BidirectionalClass] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `BidirectionalClass`.
class BidirectionalClassMapper
    implements GlobalResourceMapper<BidirectionalClass> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/bidirectional/(?<id>[^/]*)$',
  );

  /// Constructor
  const BidirectionalClassMapper();

  @override
  IriTerm? get typeIri =>
      const IriTerm('http://example.org/BidirectionalClass');

  @override
  BidirectionalClass fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.value);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id'];
    if (id == null) {
      throw DeserializationException(
        'Missing required IRI part: id in IRI ${subject.value}',
      );
    }
    final String description = reader.require(
      const IriTerm('http://example.org/description'),
    );

    return BidirectionalClass(id: id, description: description);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    BidirectionalClass resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(
          const IriTerm('http://example.org/description'),
          resource.description,
        )
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(BidirectionalClass resource) {
    final id = resource.id;
    return 'http://example.org/bidirectional/${id}';
  }
}
