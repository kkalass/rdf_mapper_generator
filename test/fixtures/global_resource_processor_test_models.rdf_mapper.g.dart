// GENERATED CODE - DO NOT MODIFY BY HAND
// 
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/global_resource_processor_test_models.dart
// Generated on: 2025-06-03T06:36:49.147298

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [Book] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type Book.
class BookMapper implements GlobalResourceMapper<Book> {
  @override
  IriTerm get typeIri => SchemaBook.classIri;

  @override
  Book fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    final iriTemplate = 'http://example.org/books/{isbn}';
    final iriParts = _parseIriParts(subject.value, iriTemplate);
    
    final isbn = iriParts['isbn'];
    final title = reader.require<String>(SchemaBook.name);
    final authorId = reader.require<String>(SchemaBook.author);

    return Book(
      isbn: isbn,
      title: title,
      authorId: authorId,
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    Book resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));
    
    final builder = context.resourceBuilder(subject);
    
    builder.addValue(SchemaBook.name, resource.title);
    builder.addValue(SchemaBook.author, resource.authorId);

    return builder.build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(Book resource) {
    var iri = 'http://example.org/books/{isbn}';
    iri = iri.replaceAll('', resource..toString());
    return iri;
  }

  /// Parses IRI parts from a complete IRI using the template.
  Map<String, String> _parseIriParts(String iri, String template) {
    final parts = <String, String>{};
    // Simple template parsing - in practice, this would be more sophisticated
    // Extract  from IRI
    final Pattern = RegExp(r'');
    final Match = Pattern.firstMatch(iri);
    if (Match != null) {
      parts[''] = Match.group(1)!;
    }
    return parts;
  }
}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithEmptyIriStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithEmptyIriStrategy.
class ClassWithEmptyIriStrategyMapper implements GlobalResourceMapper<ClassWithEmptyIriStrategy> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithEmptyIriStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithEmptyIriStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithEmptyIriStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithEmptyIriStrategyNoRegisterGlobally] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithEmptyIriStrategyNoRegisterGlobally.
class ClassWithEmptyIriStrategyNoRegisterGloballyMapper implements GlobalResourceMapper<ClassWithEmptyIriStrategyNoRegisterGlobally> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithEmptyIriStrategyNoRegisterGlobally fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithEmptyIriStrategyNoRegisterGlobally(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithEmptyIriStrategyNoRegisterGlobally resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithIriTemplateStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithIriTemplateStrategy.
class ClassWithIriTemplateStrategyMapper implements GlobalResourceMapper<ClassWithIriTemplateStrategy> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriTemplateStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    final iriTemplate = 'http://example.org/persons/{id}';
    final iriParts = _parseIriParts(subject.value, iriTemplate);
    
    final id = iriParts['id'];

    return ClassWithIriTemplateStrategy(
      id: id,
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithIriTemplateStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(ClassWithIriTemplateStrategy resource) {
    var iri = 'http://example.org/persons/{id}';
    iri = iri.replaceAll('', resource..toString());
    return iri;
  }

  /// Parses IRI parts from a complete IRI using the template.
  Map<String, String> _parseIriParts(String iri, String template) {
    final parts = <String, String>{};
    // Simple template parsing - in practice, this would be more sophisticated
    // Extract  from IRI
    final Pattern = RegExp(r'');
    final Match = Pattern.firstMatch(iri);
    if (Match != null) {
      parts[''] = Match.group(1)!;
    }
    return parts;
  }
}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithIriNamedMapperStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithIriNamedMapperStrategy.
class ClassWithIriNamedMapperStrategyMapper implements GlobalResourceMapper<ClassWithIriNamedMapperStrategy> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithIriNamedMapperStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithIriMapperStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithIriMapperStrategy.
class ClassWithIriMapperStrategyMapper implements GlobalResourceMapper<ClassWithIriMapperStrategy> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriMapperStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithIriMapperStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithIriMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [ClassWithIriMapperInstanceStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithIriMapperInstanceStrategy.
class ClassWithIriMapperInstanceStrategyMapper implements GlobalResourceMapper<ClassWithIriMapperInstanceStrategy> {
  @override
  IriTerm get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriMapperInstanceStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithIriMapperInstanceStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithIriMapperInstanceStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm('');
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

/// Generated mapper for [ClassWithMapperNamedMapperStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithMapperNamedMapperStrategy.
class ClassWithMapperNamedMapperStrategyMapper implements GlobalResourceMapper<ClassWithMapperNamedMapperStrategy> {
  @override
  IriTerm get typeIri => IriTerm("null");

  @override
  ClassWithMapperNamedMapperStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithMapperNamedMapperStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithMapperNamedMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

/// Generated mapper for [ClassWithMapperStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithMapperStrategy.
class ClassWithMapperStrategyMapper implements GlobalResourceMapper<ClassWithMapperStrategy> {
  @override
  IriTerm get typeIri => IriTerm("null");

  @override
  ClassWithMapperStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithMapperStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

/// Generated mapper for [ClassWithMapperInstanceStrategy] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithMapperInstanceStrategy.
class ClassWithMapperInstanceStrategyMapper implements GlobalResourceMapper<ClassWithMapperInstanceStrategy> {
  @override
  IriTerm get typeIri => IriTerm("null");

  @override
  ClassWithMapperInstanceStrategy fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    // Extract IRI parts
    

    return ClassWithMapperInstanceStrategy(
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    ClassWithMapperInstanceStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    
    final builder = context.resourceBuilder(subject);
    

    return builder.build();
  }

}


