// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/global_resource_processor_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'global_resource_processor_test_models.dart';
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [String] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type `String`.
class BookAuthorIdMapper implements IriTermMapper<String> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/authors/(?<authorId>[^/]*)$',
  );

  /// Constructor
  const BookAuthorIdMapper();

  @override
  String fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    return iriParts['authorId']!;
  }

  @override
  IriTerm toRdfTerm(
    String iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final authorId = iriTermValue.toString();
    return IriTerm('http://example.org/authors/${authorId}');
  }
}

/// Generated mapper for [Book] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `Book`.
class BookMapper implements GlobalResourceMapper<Book> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/books/(?<isbn>[^/]*)$',
  );

  final IriTermMapper<String> _authorIdMapper;

  /// Constructor
  const BookMapper({
    IriTermMapper<String> authorIdMapper = const BookAuthorIdMapper(),
  }) : _authorIdMapper = authorIdMapper;

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  Book fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final isbn = iriParts['isbn']!;
    final String title = reader.require(SchemaBook.name);
    final String authorId = reader.require(
      SchemaBook.author,
      deserializer: _authorIdMapper,
    );

    return Book(isbn: isbn, title: title, authorId: authorId);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    Book resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.title)
        .addValue(
          SchemaBook.author,
          resource.authorId,
          serializer: _authorIdMapper,
        )
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(Book resource) {
    final isbn = resource.isbn;
    return 'http://example.org/books/${isbn}';
  }
}

/// Generated mapper for [ClassWithEmptyIriStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithEmptyIriStrategy`.
class ClassWithEmptyIriStrategyMapper
    implements GlobalResourceMapper<ClassWithEmptyIriStrategy> {
  /// Constructor
  const ClassWithEmptyIriStrategyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithEmptyIriStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final iri = subject.iri;

    return ClassWithEmptyIriStrategy(iri: iri);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithEmptyIriStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(resource.iri);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithNoRdfType] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithNoRdfType`.
class ClassWithNoRdfTypeMapper
    implements GlobalResourceMapper<ClassWithNoRdfType> {
  /// Constructor
  const ClassWithNoRdfTypeMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  ClassWithNoRdfType fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);
    final int? age = reader.optional(SchemaPerson.foafAge);
    final iri = subject.iri;

    final retval = ClassWithNoRdfType(name, age: age);
    retval.iri = iri;
    return retval;
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithNoRdfType resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(resource.iri);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .when(
          resource.age != null,
          (b) => b.addValue(SchemaPerson.foafAge, resource.age),
        )
        .build();
  }
}

/// Generated mapper for [ClassWithEmptyIriStrategyNoRegisterGlobally] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithEmptyIriStrategyNoRegisterGlobally`.
class ClassWithEmptyIriStrategyNoRegisterGloballyMapper
    implements
        GlobalResourceMapper<ClassWithEmptyIriStrategyNoRegisterGlobally> {
  /// Constructor
  const ClassWithEmptyIriStrategyNoRegisterGloballyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithEmptyIriStrategyNoRegisterGlobally fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final iri = subject.iri;

    return ClassWithEmptyIriStrategyNoRegisterGlobally(iri: iri);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithEmptyIriStrategyNoRegisterGlobally resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(resource.iri);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriTemplateStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriTemplateStrategy`.
class ClassWithIriTemplateStrategyMapper
    implements GlobalResourceMapper<ClassWithIriTemplateStrategy> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/persons/(?<id>[^/]*)$',
  );

  /// Constructor
  const ClassWithIriTemplateStrategyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriTemplateStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id']!;

    return ClassWithIriTemplateStrategy(id: id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriTemplateStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context.resourceBuilder(subject).build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(ClassWithIriTemplateStrategy resource) {
    final id = resource.id;
    return 'http://example.org/persons/${id}';
  }
}

/// Generated mapper for [ClassWithIriTemplateAndContextVariableStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriTemplateAndContextVariableStrategy`.
class ClassWithIriTemplateAndContextVariableStrategyMapper
    implements
        GlobalResourceMapper<ClassWithIriTemplateAndContextVariableStrategy> {
  static final RegExp _regex = RegExp(
    r'^(?<baseUri>.*)/persons/(?<thisId>[^/]*)$',
  );

  final String Function() _baseUriProvider;

  /// Constructor
  const ClassWithIriTemplateAndContextVariableStrategyMapper({
    required String Function() baseUriProvider,
  }) : _baseUriProvider = baseUriProvider;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriTemplateAndContextVariableStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['thisId']!;

    return ClassWithIriTemplateAndContextVariableStrategy(id: id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriTemplateAndContextVariableStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context.resourceBuilder(subject).build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(ClassWithIriTemplateAndContextVariableStrategy resource) {
    final id = resource.id;
    final baseUri = _baseUriProvider();
    return '${baseUri}/persons/${id}';
  }
}

/// Generated mapper for [ClassWithOtherBaseUriNonGlobal] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithOtherBaseUriNonGlobal`.
class ClassWithOtherBaseUriNonGlobalMapper
    implements GlobalResourceMapper<ClassWithOtherBaseUriNonGlobal> {
  static final RegExp _regex = RegExp(
    r'^(?<otherBaseUri>.*)/persons/(?<thisId>[^/]*)$',
  );

  final String Function() _otherBaseUriProvider;

  /// Constructor
  const ClassWithOtherBaseUriNonGlobalMapper({
    required String Function() otherBaseUriProvider,
  }) : _otherBaseUriProvider = otherBaseUriProvider;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithOtherBaseUriNonGlobal fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['thisId']!;

    return ClassWithOtherBaseUriNonGlobal(id: id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithOtherBaseUriNonGlobal resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context.resourceBuilder(subject).build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(ClassWithOtherBaseUriNonGlobal resource) {
    final id = resource.id;
    final otherBaseUri = _otherBaseUriProvider();
    return '${otherBaseUri}/persons/${id}';
  }
}

/// Generated mapper for [ClassWithIriNamedMapperStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriNamedMapperStrategy`.
class ClassWithIriNamedMapperStrategyMapper
    implements GlobalResourceMapper<ClassWithIriNamedMapperStrategy> {
  final IriTermMapper<ClassWithIriNamedMapperStrategy> _iriMapper;

  /// Constructor
  const ClassWithIriNamedMapperStrategyMapper({
    required IriTermMapper<ClassWithIriNamedMapperStrategy> testMapper,
  }) : _iriMapper = testMapper;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    return ClassWithIriNamedMapperStrategy();
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm(resource, context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriNamedMapperStrategy1Part] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriNamedMapperStrategy1Part`.
class ClassWithIriNamedMapperStrategy1PartMapper
    implements GlobalResourceMapper<ClassWithIriNamedMapperStrategy1Part> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const ClassWithIriNamedMapperStrategy1PartMapper({
    required IriTermMapper<(String id,)> testMapper1Part,
  }) : _iriMapper = testMapper1Part;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy1Part fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    return ClassWithIriNamedMapperStrategy1Part(id: id);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy1Part resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriNamedMapperStrategy2Parts] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriNamedMapperStrategy2Parts`.
class ClassWithIriNamedMapperStrategy2PartsMapper
    implements GlobalResourceMapper<ClassWithIriNamedMapperStrategy2Parts> {
  final IriTermMapper<(String id, int version)> _iriMapper;

  /// Constructor
  const ClassWithIriNamedMapperStrategy2PartsMapper({
    required IriTermMapper<(String id, int version)> testMapper2Parts,
  }) : _iriMapper = testMapper2Parts;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy2Parts fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final (id, version) = _iriMapper.fromRdfTerm(subject, context);

    return ClassWithIriNamedMapperStrategy2Parts(id: id, version: version);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy2Parts resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((
      resource.id,
      resource.version,
    ), context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriNamedMapperStrategy2PartsSwapped] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriNamedMapperStrategy2PartsSwapped`.
class ClassWithIriNamedMapperStrategy2PartsSwappedMapper
    implements
        GlobalResourceMapper<ClassWithIriNamedMapperStrategy2PartsSwapped> {
  final IriTermMapper<(int version, String id)> _iriMapper;

  /// Constructor
  const ClassWithIriNamedMapperStrategy2PartsSwappedMapper({
    required IriTermMapper<(int version, String id)> testMapper2PartsSwapped,
  }) : _iriMapper = testMapper2PartsSwapped;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy2PartsSwapped fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final (version, id) = _iriMapper.fromRdfTerm(subject, context);

    return ClassWithIriNamedMapperStrategy2PartsSwapped(
      id: id,
      version: version,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy2PartsSwapped resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((
      resource.version,
      resource.id,
    ), context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriNamedMapperStrategy2PartsWithProperties] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriNamedMapperStrategy2PartsWithProperties`.
class ClassWithIriNamedMapperStrategy2PartsWithPropertiesMapper
    implements
        GlobalResourceMapper<
          ClassWithIriNamedMapperStrategy2PartsWithProperties
        > {
  final IriTermMapper<(String id, String surname, int version)> _iriMapper;

  /// Constructor
  const ClassWithIriNamedMapperStrategy2PartsWithPropertiesMapper({
    required IriTermMapper<(String id, String surname, int version)>
    testMapper3,
  }) : _iriMapper = testMapper3;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriNamedMapperStrategy2PartsWithProperties fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final (id, _, version) = _iriMapper.fromRdfTerm(subject, context);

    final String givenName = reader.require(SchemaPerson.givenName);
    final String surname = reader.require(SchemaPerson.foafSurname);
    final int? age = reader.optional(SchemaPerson.foafAge);

    final retval = ClassWithIriNamedMapperStrategy2PartsWithProperties();
    retval.id = id;
    retval.version = version;
    retval.givenName = givenName;
    retval.surname = surname;
    retval.age = age;
    return retval;
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriNamedMapperStrategy2PartsWithProperties resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((
      resource.id,
      resource.surname,
      resource.version,
    ), context);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.givenName, resource.givenName)
        .addValue(SchemaPerson.foafSurname, resource.surname)
        .when(
          resource.age != null,
          (b) => b.addValue(SchemaPerson.foafAge, resource.age),
        )
        .build();
  }
}

/// Generated mapper for [ClassWithIriMapperStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriMapperStrategy`.
class ClassWithIriMapperStrategyMapper
    implements GlobalResourceMapper<ClassWithIriMapperStrategy> {
  final IriTermMapper<ClassWithIriMapperStrategy> _iriMapper;

  /// Constructor
  const ClassWithIriMapperStrategyMapper({
    IriTermMapper<ClassWithIriMapperStrategy> iriMapper = const TestIriMapper(),
  }) : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriMapperStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    return ClassWithIriMapperStrategy();
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriMapperStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm(resource, context);

    return context.resourceBuilder(subject).build();
  }
}

/// Generated mapper for [ClassWithIriMapperInstanceStrategy] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ClassWithIriMapperInstanceStrategy`.
class ClassWithIriMapperInstanceStrategyMapper
    implements GlobalResourceMapper<ClassWithIriMapperInstanceStrategy> {
  final IriTermMapper<ClassWithIriMapperInstanceStrategy> _iriMapper;

  /// Constructor
  const ClassWithIriMapperInstanceStrategyMapper({
    IriTermMapper<ClassWithIriMapperInstanceStrategy> iriMapper =
        const TestIriMapper2(),
  }) : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithIriMapperInstanceStrategy fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    return ClassWithIriMapperInstanceStrategy(name: name);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ClassWithIriMapperInstanceStrategy resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm(resource, context);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}
