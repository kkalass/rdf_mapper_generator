// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/named_factory_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'named_factory_test_models.dart';

/// Generated mapper for [SimpleBook] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `SimpleBook`.
class SimpleBookMapper implements GlobalResourceMapper<SimpleBook> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const SimpleBookMapper({required IriTermMapper<(String id,)> iriMapper})
    : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => const IriTerm('http://example.com/Book');

  @override
  SimpleBook fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title = reader.require(
      const IriTerm('http://example.com/title'),
    );

    return SimpleBook(id: id, title: title);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    SimpleBook resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .addValue(const IriTerm('http://example.com/title'), resource.title)
        .build();
  }
}

/// Generated mapper for [ConfigurableBook] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ConfigurableBook`.
class ConfigurableBookMapper implements GlobalResourceMapper<ConfigurableBook> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const ConfigurableBookMapper({required IriTermMapper<(String id,)> iriMapper})
    : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => const IriTerm('http://example.com/ConfigurableBook');

  @override
  ConfigurableBook fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title = reader.require(
      const IriTerm('http://example.com/title'),
    );
    final String author = reader.require(
      const IriTerm('http://example.com/author'),
    );

    return ConfigurableBook(id: id, title: title, author: author);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ConfigurableBook resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .addValue(const IriTerm('http://example.com/title'), resource.title)
        .addValue(const IriTerm('http://example.com/author'), resource.author)
        .build();
  }
}

/// Generated mapper for [LocalBook] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `LocalBook`.
class LocalBookMapper implements GlobalResourceMapper<LocalBook> {
  final IriTermMapper<(String id,)> _iriMapper;

  /// Constructor
  const LocalBookMapper({required IriTermMapper<(String id,)> iriMapper})
    : _iriMapper = iriMapper;

  @override
  IriTerm? get typeIri => const IriTerm('http://example.com/LocalBook');

  @override
  LocalBook fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title = reader.require(
      const IriTerm('http://example.com/title'),
    );

    return LocalBook(id: id, title: title);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    LocalBook resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .addValue(const IriTerm('http://example.com/title'), resource.title)
        .build();
  }
}

/// Generated mapper for [ContextualBook] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `ContextualBook`.
class ContextualBookMapper implements GlobalResourceMapper<ContextualBook> {
  final IriTermMapper<(String id,)> _iriMapper;
  final IriTermMapper<String> _simpleVariant2Mapper;
  final IriTermMapper<String> _simpleVariantMapper;

  /// Constructor
  const ContextualBookMapper({
    required IriTermMapper<(String id,)> iriMapper,
    required IriTermMapper<String> simpleVariant2Mapper,
    required IriTermMapper<String> simpleVariantMapper,
  }) : _iriMapper = iriMapper,
       _simpleVariant2Mapper = simpleVariant2Mapper,
       _simpleVariantMapper = simpleVariantMapper;

  @override
  IriTerm? get typeIri => const IriTerm('http://example.com/ContextualBook');

  @override
  ContextualBook fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final (id,) = _iriMapper.fromRdfTerm(subject, context);

    final String title = reader.require(
      const IriTerm('http://example.com/title'),
    );
    final String simpleVariant = reader.require(
      const IriTerm('http://example.com/simpleVariant'),
      deserializer: _simpleVariantMapper,
    );
    final String simpleVariant2 = reader.require(
      const IriTerm('http://example.com/simpleVariant2'),
      deserializer: _simpleVariant2Mapper,
    );

    return ContextualBook(
      id: id,
      title: title,
      simpleVariant: simpleVariant,
      simpleVariant2: simpleVariant2,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    ContextualBook resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((resource.id,), context);

    return context
        .resourceBuilder(subject)
        .addValue(const IriTerm('http://example.com/title'), resource.title)
        .addValue(
          const IriTerm('http://example.com/simpleVariant'),
          resource.simpleVariant,
          serializer: _simpleVariantMapper,
        )
        .addValue(
          const IriTerm('http://example.com/simpleVariant2'),
          resource.simpleVariant2,
          serializer: _simpleVariant2Mapper,
        )
        .build();
  }
}
