// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/root_document.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field, unnecessary_string_interpolations

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'root_document.dart';
import 'root_document_child.dart';
import 'root_document_child.rdf_mapper.g.dart' as rdcrmg;

/// Generated mapper for [RootDocument] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `RootDocument`.
class RootDocumentMapper implements GlobalResourceMapper<RootDocument> {
  static final RegExp _regex = RegExp(
    r'^tag:example\.org,2025:document-(?<id>[^/]*)$',
  );

  /// Constructor
  const RootDocumentMapper();

  @override
  IriTerm? get typeIri => const IriTerm('http://example.org/RootDocument');

  @override
  RootDocument fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.value);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id'];
    if (id == null) {
      throw DeserializationException(
        'Missing required IRI part: id in IRI ${subject.value}',
      );
    }
    final Set<DocumentChild> children = reader
        .requireCollection<Set<DocumentChild>, DocumentChild>(
          const IriTerm('http://example.org/hasChild'),
          UnorderedItemsSetMapper.new,
          itemDeserializer: rdcrmg.DocumentChildMapper(
            documentIriProvider: () =>
                throw Exception('Must not call provider for deserialization'),
          ),
        );

    return RootDocument(id, children);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    RootDocument resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addCollection<Set<DocumentChild>, DocumentChild>(
          const IriTerm('http://example.org/hasChild'),
          resource.children,
          UnorderedItemsSetMapper.new,
          itemSerializer: rdcrmg.DocumentChildMapper(
            documentIriProvider: () => subject.value,
          ),
        )
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(RootDocument resource) {
    final id = resource.id;
    return 'tag:example.org,2025:document-${id}';
  }
}
