// GENERATED CODE - DO NOT MODIFY BY HAND
// 
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/local_resource_processor_test_models.dart
// Generated on: 2025-06-18T11:32:55.986529

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';
import 'local_resource_processor_test_models.dart';

// Other imports
import 'package:rdf_vocabularies/schema.dart' as schema;

/// Generated mapper for [Book] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type Book.
class BookMapper implements LocalResourceMapper<Book> {


  /// Constructor
  const BookMapper();

  @override
  IriTerm get typeIri => schema.SchemaBook.classIri;

  @override
  Book fromRdfResource(BlankNodeTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    

    
    final isbn = reader.require<String>(schema.SchemaBook.isbn);

    final title = reader.require<String>(schema.SchemaBook.name);

    final authorId = reader.require<String>(schema.SchemaBook.author);

    return Book(
      isbn: isbn,
      title: title,
      authorId: authorId
    );
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    Book resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();
    
    return context.resourceBuilder(subject)
      .addValue(schema.SchemaBook.isbn, resource.isbn)
      .addValue(schema.SchemaBook.name, resource.title)
      .addValue(schema.SchemaBook.author, resource.authorId)
      .build();
  }

}


/// Generated mapper for [ClassNoRegisterGlobally] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassNoRegisterGlobally.
class ClassNoRegisterGloballyMapper implements LocalResourceMapper<ClassNoRegisterGlobally> {


  /// Constructor
  const ClassNoRegisterGloballyMapper();

  @override
  IriTerm get typeIri => schema.SchemaPerson.classIri;

  @override
  ClassNoRegisterGlobally fromRdfResource(BlankNodeTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    

    
    final name = reader.require<String>(schema.SchemaPerson.name);

    return ClassNoRegisterGlobally(
      name: name
    );
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassNoRegisterGlobally resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();
    
    return context.resourceBuilder(subject)
      .addValue(schema.SchemaPerson.name, resource.name)
      .build();
  }

}


