// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/local_resource_processor_test_models.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'local_resource_processor_test_models.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [String] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type String.
class BookAuthorIdMapper implements IriTermMapper<String> {
  static final RegExp _regex = RegExp(
    r'^http://example\.org/authors/(?<authorId>[^/]*)$',
  );

  /// Constructor
  const BookAuthorIdMapper();

  @override
  String fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    return iriParts['authorId']!;
  }

  @override
  IriTerm toRdfTerm(
    String iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final authorId = iriTermValue.toString();
    return IriTerm('http://example.org/authors/${authorId}');
  }
}

/// Generated mapper for [Book] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type Book.
class BookMapper implements LocalResourceMapper<Book> {
  final IriTermMapper<String> _authorIdMapper;

  /// Constructor
  const BookMapper({
    IriTermMapper<String> authorIdMapper = const BookAuthorIdMapper(),
  }) : _authorIdMapper = authorIdMapper;

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  Book fromRdfResource(BlankNodeTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final String isbn = reader.require(SchemaBook.isbn);
    final String title = reader.require(SchemaBook.name);
    final String authorId = reader.require(
      SchemaBook.author,
      iriTermDeserializer: _authorIdMapper,
    );

    return Book(isbn: isbn, title: title, authorId: authorId);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    Book resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.isbn, resource.isbn)
        .addValue(SchemaBook.name, resource.title)
        .addValue(
          SchemaBook.author,
          resource.authorId,
          iriTermSerializer: _authorIdMapper,
        )
        .build();
  }
}

/// Generated mapper for [ClassNoRegisterGlobally] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassNoRegisterGlobally.
class ClassNoRegisterGloballyMapper
    implements LocalResourceMapper<ClassNoRegisterGlobally> {
  /// Constructor
  const ClassNoRegisterGloballyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassNoRegisterGlobally fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    return ClassNoRegisterGlobally(name: name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassNoRegisterGlobally resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithNoRdfType] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithNoRdfType.
class ClassWithNoRdfTypeMapper
    implements LocalResourceMapper<ClassWithNoRdfType> {
  /// Constructor
  const ClassWithNoRdfTypeMapper();

  @override
  IriTerm? get typeIri => null;

  @override
  ClassWithNoRdfType fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);
    final int age = reader.require(SchemaPerson.foafAge);

    return ClassWithNoRdfType(name, age: age);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithNoRdfType resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .addValue(SchemaPerson.foafAge, resource.age)
        .build();
  }
}

/// Generated mapper for [ClassWithPositionalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithPositionalProperty.
class ClassWithPositionalPropertyMapper
    implements LocalResourceMapper<ClassWithPositionalProperty> {
  /// Constructor
  const ClassWithPositionalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithPositionalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    return ClassWithPositionalProperty(name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithPositionalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithNonFinalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithNonFinalProperty.
class ClassWithNonFinalPropertyMapper
    implements LocalResourceMapper<ClassWithNonFinalProperty> {
  /// Constructor
  const ClassWithNonFinalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithNonFinalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    return ClassWithNonFinalProperty(name: name);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithNonFinalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithNonFinalPropertyWithDefault] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithNonFinalPropertyWithDefault.
class ClassWithNonFinalPropertyWithDefaultMapper
    implements LocalResourceMapper<ClassWithNonFinalPropertyWithDefault> {
  /// Constructor
  const ClassWithNonFinalPropertyWithDefaultMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithNonFinalPropertyWithDefault fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    final retval = ClassWithNonFinalPropertyWithDefault();
    retval.name = name;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithNonFinalPropertyWithDefault resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithNonFinalOptionalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithNonFinalOptionalProperty.
class ClassWithNonFinalOptionalPropertyMapper
    implements LocalResourceMapper<ClassWithNonFinalOptionalProperty> {
  /// Constructor
  const ClassWithNonFinalOptionalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithNonFinalOptionalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String? name = reader.optional(SchemaPerson.name);

    final retval = ClassWithNonFinalOptionalProperty();
    retval.name = name;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithNonFinalOptionalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .when(
          resource.name != null,
          (b) => b.addValue(SchemaPerson.name, resource.name),
        )
        .build();
  }
}

/// Generated mapper for [ClassWithLateNonFinalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithLateNonFinalProperty.
class ClassWithLateNonFinalPropertyMapper
    implements LocalResourceMapper<ClassWithLateNonFinalProperty> {
  /// Constructor
  const ClassWithLateNonFinalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithLateNonFinalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    final retval = ClassWithLateNonFinalProperty();
    retval.name = name;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithLateNonFinalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithLateFinalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithLateFinalProperty.
class ClassWithLateFinalPropertyMapper
    implements LocalResourceMapper<ClassWithLateFinalProperty> {
  /// Constructor
  const ClassWithLateFinalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithLateFinalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);

    final retval = ClassWithLateFinalProperty();
    retval.name = name;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithLateFinalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .build();
  }
}

/// Generated mapper for [ClassWithMixedFinalAndLateFinalProperty] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type ClassWithMixedFinalAndLateFinalProperty.
class ClassWithMixedFinalAndLateFinalPropertyMapper
    implements LocalResourceMapper<ClassWithMixedFinalAndLateFinalProperty> {
  /// Constructor
  const ClassWithMixedFinalAndLateFinalPropertyMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  ClassWithMixedFinalAndLateFinalProperty fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String name = reader.require(SchemaPerson.name);
    final int age = reader.require(SchemaPerson.foafAge);

    final retval = ClassWithMixedFinalAndLateFinalProperty(name: name);
    retval.age = age;
    return retval;
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    ClassWithMixedFinalAndLateFinalProperty resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.name, resource.name)
        .addValue(SchemaPerson.foafAge, resource.age)
        .build();
  }
}
