// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/rdf_mapper_annotations/examples/inference_test.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'inference_test.dart';
import 'package:rdf_vocabularies/schema.dart';

/// Generated mapper for [TestGlobalResource] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type TestGlobalResource.
class TestGlobalResourceMapper
    implements GlobalResourceMapper<TestGlobalResource> {
  static final RegExp _regex = RegExp(
    '^http://example\.org/global/(?<id>[^/]*)\$',
  );

  /// Constructor
  const TestGlobalResourceMapper();

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  TestGlobalResource fromRdfResource(
    IriTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id']!;
    final String title = reader.require(SchemaBook.name);

    return TestGlobalResource(id: id, title: title);
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    TestGlobalResource resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = IriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.title)
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(TestGlobalResource resource) {
    final id = resource.id;
    return 'http://example.org/global/${id}';
  }
}

/// Generated mapper for [TestLocalResource] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type TestLocalResource.
class TestLocalResourceMapper
    implements LocalResourceMapper<TestLocalResource> {
  /// Constructor
  const TestLocalResourceMapper();

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  TestLocalResource fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final String title = reader.require(SchemaBook.name);

    return TestLocalResource(title: title);
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    TestLocalResource resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.title)
        .build();
  }
}

/// Generated mapper for [TestIri] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type TestIri.
class TestIriMapper implements IriTermMapper<TestIri> {
  static final RegExp _regex = RegExp(
    '^http://example\.org/items/(?<id>[^/]*)\$',
  );

  /// Constructor
  const TestIriMapper();

  @override
  TestIri fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    final id = iriParts['id']!;

    return TestIri(id: id);
  }

  @override
  IriTerm toRdfTerm(
    TestIri iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final id = iriTermValue.id;
    return IriTerm('http://example.org/items/${id}');
  }
}

/// Generated mapper for [InferenceTestContainer] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type InferenceTestContainer.
class InferenceTestContainerMapper
    implements LocalResourceMapper<InferenceTestContainer> {
  final GlobalResourceMapper<TestGlobalResource> _globalResourceMapper;
  final IriTermMapper<TestIri> _iriMapper;
  final LocalResourceMapper<TestLocalResource> _localResourceMapper;

  /// Constructor
  const InferenceTestContainerMapper({
    GlobalResourceMapper<TestGlobalResource> globalResourceMapper =
        const TestGlobalResourceMapper(),
    IriTermMapper<TestIri> iriMapper = const TestIriMapper(),
    LocalResourceMapper<TestLocalResource> localResourceMapper =
        const TestLocalResourceMapper(),
  }) : _globalResourceMapper = globalResourceMapper,
       _iriMapper = iriMapper,
       _localResourceMapper = localResourceMapper;

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  InferenceTestContainer fromRdfResource(
    BlankNodeTerm subject,
    DeserializationContext context,
  ) {
    final reader = context.reader(subject);

    final TestGlobalResource? globalResource = reader.optional(
      SchemaBook.author,
      globalResourceDeserializer: _globalResourceMapper,
    );
    final TestLocalResource? localResource = reader.optional(
      SchemaBook.publisher,
      localResourceDeserializer: _localResourceMapper,
    );
    final TestIri? iri = reader.optional(
      SchemaBook.identifier,
      iriTermDeserializer: _iriMapper,
    );

    return InferenceTestContainer(
      globalResource: globalResource,
      localResource: localResource,
      iri: iri,
    );
  }

  @override
  (BlankNodeTerm, List<Triple>) toRdfResource(
    InferenceTestContainer resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addValueIfNotNull(
          SchemaBook.author,
          resource.globalResource,
          resourceSerializer: _globalResourceMapper,
        )
        .addValueIfNotNull(
          SchemaBook.publisher,
          resource.localResource,
          resourceSerializer: _localResourceMapper,
        )
        .addValueIfNotNull(
          SchemaBook.identifier,
          resource.iri,
          iriTermSerializer: _iriMapper,
        )
        .build();
  }
}
