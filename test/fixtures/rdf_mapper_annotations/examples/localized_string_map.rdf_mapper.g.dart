// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/rdf_mapper_annotations/examples/localized_string_map.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'localized_string_map.dart';

/// Generated mapper for [Book] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type Book.
class BookMapper implements LocalResourceMapper<Book> {
  final LiteralTermMapper<MapEntry<String, String>> _translationsMapper;

  /// Constructor
  const BookMapper({
    LiteralTermMapper<MapEntry<String, String>> translationsMapper =
        const LocalizedEntryMapper(),
  }) : _translationsMapper = translationsMapper;

  @override
  IriTerm? get typeIri => null;

  @override
  Book fromRdfResource(BlankNodeTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final Map<String, String> translations = reader.getMap<String, String>(
      const IriTerm.prevalidated('http://example.org/book/title'),
      deserializer: _translationsMapper,
    );

    return Book(translations: translations);
  }

  @override
  (BlankNodeTerm, Iterable<Triple>) toRdfResource(
    Book resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = BlankNodeTerm();

    return context
        .resourceBuilder(subject)
        .addMap<String, String>(
          const IriTerm.prevalidated('http://example.org/book/title'),
          resource.translations,
          serializer: _translationsMapper,
        )
        .build();
  }
}
