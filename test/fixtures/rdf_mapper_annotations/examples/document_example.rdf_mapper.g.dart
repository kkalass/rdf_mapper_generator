// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/rdf_mapper_annotations/examples/document_example.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'document_example.dart';
import 'package:rdf_vocabularies_core/foaf.dart';
import 'package:rdf_vocabularies_core/pim.dart';
import 'package:rdf_vocabularies_core/solid.dart';

/// Generated mapper for [Document<T>] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `Document<T>`.
class DocumentMapper<T> implements GlobalResourceMapper<Document<T>> {
  final SerializationProvider<Document, T> _primaryTopicSerializationProvider;

  /// Constructor
  const DocumentMapper({
    required SerializationProvider<Document, T> primaryTopic,
  }) : _primaryTopicSerializationProvider = primaryTopic;

  @override
  IriTerm? get typeIri => FoafPersonalProfileDocument.classIri;

  @override
  Document<T> fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final documentIri = subject.value;
    final T primaryTopic = reader.require(
      FoafPersonalProfileDocument.primaryTopic,
      deserializer: _primaryTopicSerializationProvider.deserializer(
        subject,
        context,
      ),
    );
    final Uri maker = reader.require(FoafPersonalProfileDocument.maker);

    // Get unmapped triples as the last reader operation for lossless mapping
    final RdfGraph unmapped = reader.getUnmapped<RdfGraph>(
      globalUnmapped: true,
    );

    return Document<T>(
      documentIri: documentIri,
      primaryTopic: primaryTopic,
      maker: maker,
      unmapped: unmapped,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    Document<T> resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(resource.documentIri);

    return context
        .resourceBuilder(subject)
        .addValue(
          FoafPersonalProfileDocument.primaryTopic,
          resource.primaryTopic,
          serializer: _primaryTopicSerializationProvider.serializer(
            resource,
            subject,
            context,
          ),
        )
        .addValue(FoafPersonalProfileDocument.maker, resource.maker)
        .addUnmapped(resource.unmapped)
        .build();
  }
}

/// Generated mapper for [Person] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `Person`.
class PersonMapper implements GlobalResourceMapper<Person> {
  final SerializationProvider<Person, String> _accountSerializationProvider;
  final String Function() _documentIriProvider;
  final SerializationProvider<Person, String>
  _preferencesFileSerializationProvider;
  final SerializationProvider<Person, String>
  _privateTypeIndexSerializationProvider;
  final SerializationProvider<Person, String>
  _publicTypeIndexSerializationProvider;

  /// Constructor
  const PersonMapper({
    SerializationProvider<Person, String> accountSerializationProvider =
        const IriRelativeSerializationProvider(),
    required String Function() documentIriProvider,
    SerializationProvider<Person, String> preferencesFileSerializationProvider =
        const IriRelativeSerializationProvider(),
    SerializationProvider<Person, String>
        privateTypeIndexSerializationProvider =
        const IriRelativeSerializationProvider(),
    SerializationProvider<Person, String> publicTypeIndexSerializationProvider =
        const IriRelativeSerializationProvider(),
  }) : _accountSerializationProvider = accountSerializationProvider,
       _documentIriProvider = documentIriProvider,
       _preferencesFileSerializationProvider =
           preferencesFileSerializationProvider,
       _privateTypeIndexSerializationProvider =
           privateTypeIndexSerializationProvider,
       _publicTypeIndexSerializationProvider =
           publicTypeIndexSerializationProvider;

  @override
  IriTerm? get typeIri => FoafPerson.classIri;

  @override
  Person fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final String name = reader.require(FoafPerson.name);
    final String preferencesFile = reader.require(
      FoafPerson.pimPreferencesFile,
      deserializer: _preferencesFileSerializationProvider.deserializer(
        subject,
        context,
      ),
    );
    final Uri storage = reader.require(Pim.storage);
    final String account = reader.require(
      Solid.account,
      deserializer: _accountSerializationProvider.deserializer(
        subject,
        context,
      ),
    );
    final Uri oidcIssuer = reader.require(Solid.oidcIssuer);
    final String privateTypeIndex = reader.require(
      Solid.privateTypeIndex,
      deserializer: _privateTypeIndexSerializationProvider.deserializer(
        subject,
        context,
      ),
    );
    final String publicTypeIndex = reader.require(
      Solid.publicTypeIndex,
      deserializer: _publicTypeIndexSerializationProvider.deserializer(
        subject,
        context,
      ),
    );

    return Person(
      name: name,
      preferencesFile: preferencesFile,
      storage: storage,
      account: account,
      oidcIssuer: oidcIssuer,
      privateTypeIndex: privateTypeIndex,
      publicTypeIndex: publicTypeIndex,
    );
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    Person resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(FoafPerson.name, resource.name)
        .addValue(
          FoafPerson.pimPreferencesFile,
          resource.preferencesFile,
          serializer: _preferencesFileSerializationProvider.serializer(
            resource,
            subject,
            context,
          ),
        )
        .addValue(Pim.storage, resource.storage)
        .addValue(
          Solid.account,
          resource.account,
          serializer: _accountSerializationProvider.serializer(
            resource,
            subject,
            context,
          ),
        )
        .addValue(Solid.oidcIssuer, resource.oidcIssuer)
        .addValue(
          Solid.privateTypeIndex,
          resource.privateTypeIndex,
          serializer: _privateTypeIndexSerializationProvider.serializer(
            resource,
            subject,
            context,
          ),
        )
        .addValue(
          Solid.publicTypeIndex,
          resource.publicTypeIndex,
          serializer: _publicTypeIndexSerializationProvider.serializer(
            resource,
            subject,
            context,
          ),
        )
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(Person resource) {
    final documentIri = _documentIriProvider();
    return '${documentIri}#me';
  }
}
