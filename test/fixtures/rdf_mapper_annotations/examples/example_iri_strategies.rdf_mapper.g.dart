// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Source: test/fixtures/rdf_mapper_annotations/examples/example_iri_strategies.dart

// ignore_for_file: unused_import, unnecessary_cast, prefer_const_constructors
// ignore_for_file: unnecessary_brace_in_string_interps, prefer_conditional_assignment
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values
// ignore_for_file: unused_field

import 'package:rdf_core/rdf_core.dart';
import 'package:rdf_mapper/rdf_mapper.dart';

// Other imports
import 'example_iri_strategies.dart';
import 'package:rdf_vocabularies_schema/schema.dart';

/// Generated mapper for [StandardIsbn] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type `StandardIsbn`.
class StandardIsbnMapper implements IriTermMapper<StandardIsbn> {
  static final RegExp _regex = RegExp(r'^urn:isbn:(?<value>[^/]*)$');

  /// Constructor
  const StandardIsbnMapper();

  @override
  StandardIsbn fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.value);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    final value = iriParts['value']!;

    return StandardIsbn(value);
  }

  @override
  IriTerm toRdfTerm(
    StandardIsbn iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final value = iriTermValue.value;
    return context.createIriTerm('urn:isbn:${value}');
  }
}

/// Generated mapper for [AbsoluteUri] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type `AbsoluteUri`.
class AbsoluteUriMapper implements IriTermMapper<AbsoluteUri> {
  static final RegExp _regex = RegExp(r'^(?<uri>.*)$');

  /// Constructor
  const AbsoluteUriMapper();

  @override
  AbsoluteUri fromRdfTerm(IriTerm term, DeserializationContext context) {
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.value);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? '',
    };
    final uri = iriParts['uri']!;

    return AbsoluteUri(uri);
  }

  @override
  IriTerm toRdfTerm(
    AbsoluteUri iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final uri = iriTermValue.uri;
    return context.createIriTerm('${uri}');
  }
}

/// Generated mapper for [SimpleBook] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `SimpleBook`.
class SimpleBookMapper implements GlobalResourceMapper<SimpleBook> {
  static final RegExp _regex = RegExp(
    r'^https://library\.example\.org/books/(?<id>[^/]*)\.ttl$',
  );

  /// Constructor
  const SimpleBookMapper();

  @override
  IriTerm? get typeIri => SchemaBook.classIri;

  @override
  SimpleBook fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final RegExpMatch? match = _regex.firstMatch(subject.value);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };

    final id = iriParts['id']!;
    final String title = reader.require(SchemaBook.name);

    return SimpleBook(id, title);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    SimpleBook resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(_buildIri(resource));

    return context
        .resourceBuilder(subject)
        .addValue(SchemaBook.name, resource.title)
        .build();
  }

  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri(SimpleBook resource) {
    final id = resource.id;
    return 'https://library.example.org/books/${id}.ttl';
  }
}

/// Generated mapper for [Person] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `Person`.
class PersonMapper implements GlobalResourceMapper<Person> {
  /// Constructor
  const PersonMapper();

  @override
  IriTerm? get typeIri => SchemaPerson.classIri;

  @override
  Person fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final iri = subject.value;
    final String givenName = reader.require(SchemaPerson.givenName);

    return Person(iri, givenName);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    Person resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = context.createIriTerm(resource.iri);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaPerson.givenName, resource.givenName)
        .build();
  }
}

/// Generated mapper for [Chapter] global resources.
///
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type `Chapter`.
class ChapterMapper implements GlobalResourceMapper<Chapter> {
  final IriTermMapper<(String bookId, int chapterNumber)> _iriMapper;

  /// Constructor
  const ChapterMapper({
    required IriTermMapper<(String bookId, int chapterNumber)> chapterIdMapper,
  }) : _iriMapper = chapterIdMapper;

  @override
  IriTerm? get typeIri => SchemaChapter.classIri;

  @override
  Chapter fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);

    final (_, _) = _iriMapper.fromRdfTerm(subject, context);

    final String bookId = reader.require(SchemaChapter.isPartOf);
    final int chapterNumber = reader.require(SchemaChapter.position);
    final String title = reader.require(SchemaChapter.name);

    return Chapter(bookId, chapterNumber, title);
  }

  @override
  (IriTerm, Iterable<Triple>) toRdfResource(
    Chapter resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    final subject = _iriMapper.toRdfTerm((
      resource.bookId,
      resource.chapterNumber,
    ), context);

    return context
        .resourceBuilder(subject)
        .addValue(SchemaChapter.isPartOf, resource.bookId)
        .addValue(SchemaChapter.position, resource.chapterNumber)
        .addValue(SchemaChapter.name, resource.title)
        .build();
  }
}
