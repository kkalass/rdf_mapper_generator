/// Generated mapper for [{{className}}] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF terms for iri terms of type {{className}}.
class {{mapperClassName}} implements {{mapperInterfaceName}}<{{className}}> {

  {{#iriStrategy}}
  {{#hasTemplate}}
  static final RegExp _regex = RegExp('{{template.regexPattern}}');
  {{/hasTemplate}}
  {{/iriStrategy}}

  {{#contextProviders}}
  /// Provider for context variable '{{value.variableName}}'
  final String Function() {{value.privateFieldName}};
  {{/contextProviders}}

  /// Constructor{{#hasContextProviders}} requiring providers for context variables{{/hasContextProviders}}
  const {{mapperClassName}}({{#hasContextProviders}}{
    {{#contextProviders}}
    required String Function() {{value.parameterName}},
    {{/contextProviders}}
  }{{/hasContextProviders}}){{#hasContextProviders}} : {{#contextProviders}}{{value.privateFieldName}} = {{value.parameterName}}{{^last}},
       {{/last}}{{/contextProviders}}{{/hasContextProviders}};

  @override
  {{className}} fromRdfTerm(IriTerm term, DeserializationContext context) {
    {{#iriStrategy}}
    {{#hasTemplate}}
    /// Parses IRI parts from a complete IRI using a template.
    final RegExpMatch? match = _regex.firstMatch(term.iri);

    final iriParts = {
      for (var name in match?.groupNames ?? const <String>[])
        name: match?.namedGroup(name) ?? ''
    };
    {{/hasTemplate}}
    {{/iriStrategy}}
    {{#hasSingleMappedValue}}
    return iriParts['{{singleMappedValue.variableName}}']!;
    {{/hasSingleMappedValue}}
    {{^hasSingleMappedValue}}
    {{#constructorParametersOrOtherFields}}
    final {{value.name}} = iriParts['{{value.iriPartName}}']{{#value.isRequired}}!{{/value.isRequired}}{{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/constructorParametersOrOtherFields}}

    {{#hasNonConstructorFields}}final retval = {{/hasNonConstructorFields}}{{^hasNonConstructorFields}}return {{/hasNonConstructorFields}}{{className}}(
      {{#constructorParameters}}
      {{#value.isNamed}}{{value.name}}: {{/value.isNamed}}{{value.name}}{{^last}},{{/last}}
      {{/constructorParameters}}
    );
    {{#hasNonConstructorFields}}
    {{#nonConstructorFields}}
    {{#value.isIriPart}}
    retval.{{value.name}} = {{value.name}};
    {{/value.isIriPart}}
    {{/nonConstructorFields}}
    return retval;
    {{/hasNonConstructorFields}}
    {{/hasSingleMappedValue}}
  }

  @override
  IriTerm toRdfTerm(
    {{className}} iriTermValue,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    {{#iriStrategy}}
    {{#hasTemplate}}
    {{#template.propertyVariables}}
    final {{value.variableName}} = {{^value.isMappedValue}}iriTermValue.{{value.variableName}}{{/value.isMappedValue}}{{#value.isMappedValue}}iriTermValue{{/value.isMappedValue}}{{^value.isString}}.toString(){{/value.isString}};
    {{/template.propertyVariables}}
    {{#contextProviders}}
    final {{value.variableName}} = {{value.privateFieldName}}();
    {{/contextProviders}}
    return IriTerm('{{template.interpolatedTemplate}}');
    {{/hasTemplate}}
    {{/iriStrategy}}
  }
}
