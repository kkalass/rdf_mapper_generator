// GENERATED CODE - DO NOT MODIFY BY HAND
//
// This file was generated by the RDF Mapper Generator.
// Generated on: {{generatedOn}}

import 'package:rdf_mapper/rdf_mapper.dart';

{{#hasAliasedImports}}
{{#aliasedImports}}
import '{{uri}}'{{#hasAlias}} as {{alias}}{{/hasAlias}};
{{/aliasedImports}}
{{/hasAliasedImports}}

/// Initializes and returns an RdfMapper with {{#isTest}}test {{/isTest}}mappers registered.
/// 
/// [rdfMapper] An optional RdfMapper instance to use. If not provided, a new one will be created.
{{#hasProviders}}
/// Provider parameters:
{{#providers}}
/// * [{{parameterName}}] {{placeholder}}
{{/providers}}
{{/hasProviders}}
{{#hasNamedCustomMappers}}
/// named mapper parameters:
{{#namedCustomMappers}}
/// * [{{name}}] mapper of type {{type}}
{{/namedCustomMappers}}
{{/hasNamedCustomMappers}}
RdfMapper init{{#isTest}}Test{{/isTest}}RdfMapper({
  RdfMapper? rdfMapper,
  {{#hasProviders}}
  // Provider parameters
  {{#providers}}
  required {{type}} Function() {{parameterName}},
  {{/providers}}
  {{/hasProviders}}
  {{#hasNamedCustomMappers}}
  // Named mapper parameters
  {{#namedCustomMappers}}
  required {{type}} {{name}},
  {{/namedCustomMappers}}
  {{/hasNamedCustomMappers}}
}) {
  if (rdfMapper == null) {
    rdfMapper = RdfMapper.withDefaultRegistry();
  }
  var registry = rdfMapper.registry;

  {{#mappers}}
  registry.registerMapper<{{type}}>(
    {{name}}(
      {{#contextProviders}}
      {{value.parameterName}}: {{value.parameterName}},
      {{/contextProviders}}
      {{#iriMappers}}
      {{parameterName}}: {{code}},
      {{/iriMappers}}
    )
  );
  {{/mappers}}
  
  return rdfMapper;
}
