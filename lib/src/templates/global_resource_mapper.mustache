/// Generated mapper for [{{className}}] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type {{className}}.
class {{mapperClassName}} implements GlobalResourceMapper<{{className}}> {
  {{#contextProviders}}
  /// Provider for context variable '{{value.variableName}}'
  final String Function() {{value.privateFieldName}};
  {{/contextProviders}}

  /// Constructor{{#hasContextProviders}} requiring providers for context variables{{/hasContextProviders}}
  const {{mapperClassName}}({{#hasContextProviders}}{
    {{#contextProviders}}
    required String Function() {{value.parameterName}},
    {{/contextProviders}}
  }{{/hasContextProviders}}){{#hasContextProviders}} : {{#contextProviders}}{{value.privateFieldName}} = {{value.parameterName}}{{^last}},
       {{/last}}{{/contextProviders}}{{/hasContextProviders}};

  @override
  IriTerm get typeIri => {{#hasTypeIri}}{{typeIri}}{{/hasTypeIri}}{{^hasTypeIri}}null{{/hasTypeIri}};

  @override
  {{className}} fromRdfResource(IriTerm subject, DeserializationContext context) {
    {{#needsReader}}
    final reader = context.reader(subject);
    {{/needsReader}}
    
    {{#iriStrategy}}
    // Extract IRI parts
    {{#hasTemplate}}
    final iriParts = _parseIriParts(subject.iri);
    {{/hasTemplate}}
    {{/iriStrategy}}
    
    {{#constructorParameters}}
    {{#value.isIriPart}}
    final {{value.name}} = iriParts['{{value.iriPartName}}']{{#value.isRequired}}!{{/value.isRequired}}{{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/value.isIriPart}}
    {{#value.isRdfProperty}}
    final {{value.name}} = reader.{{#value.isRequired}}require{{/value.isRequired}}{{^value.isRequired}}optional{{/value.isRequired}}<{{value.dartType}}>({{value.predicate}}){{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/value.isRdfProperty}}
    {{/constructorParameters}}

    return {{className}}(
      {{#constructorParameters}}
      {{#value.isNamed}}{{value.name}}: {{/value.isNamed}}{{value.name}}{{^last}},{{/last}}
      {{/constructorParameters}}
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    {{className}} resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    {{#iriStrategy}}
    final subject = {{#hasTemplate}}IriTerm(_buildIri(resource)){{/hasTemplate}}{{^hasTemplate}}IriTerm('{{baseIri}}'){{/hasTemplate}};
    {{/iriStrategy}}
    
    final builder = context.resourceBuilder(subject);
    
    {{#properties}}
    {{#isRdfProperty}}
    {{#isRequired}}
    builder.addValue({{predicate}}, {{#hasConverter}}{{converter}}.toRdf({{/hasConverter}}resource.{{propertyName}}{{#hasConverter}}){{/hasConverter}});
    {{/isRequired}}
    {{^isRequired}}
    if (resource.{{propertyName}} != null) {
      builder.addValue({{predicate}}, {{#hasConverter}}{{converter}}.toRdf({{/hasConverter}}resource.{{propertyName}}{{#hasConverter}}){{/hasConverter}});
    }
    {{/isRequired}}
    {{/isRdfProperty}}
    {{/properties}}

    return builder.build();
  }

  {{#iriStrategy}}
  {{#hasTemplate}}
  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri({{className}} resource) {
    var iri = '{{template.template}}';
    {{#template.propertyVariables}}
    iri = iri.replaceAll('{{value.placeholder}}', resource.{{value.variableName}}.toString());
    {{/template.propertyVariables}}
    {{#contextProviders}}
    iri = iri.replaceAll('{{value.placeholder}}', {{value.privateFieldName}}());
    {{/contextProviders}}
    return iri;
  }

  static final RegExp _regex = RegExp('{{template.regexPattern}}');

  /// Parses IRI parts from a complete IRI using a template.
  ///
  /// Supports RFC 6570 URI Template standard:
  /// - {variable} (default): excludes reserved characters like '/'
  /// - {+variable}: includes reserved characters for URLs/paths (RFC 6570 Level 2)
  Map<String, String> _parseIriParts(String iri) {
    // Try to match the IRI against the regex pattern
    RegExpMatch? match = _regex.firstMatch(iri);

    return match == null
        ? {}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
  }
  {{/hasTemplate}}
  {{/iriStrategy}}
}
