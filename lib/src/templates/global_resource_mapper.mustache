/// Generated mapper for [{{className}}] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type {{className}}.
class {{mapperClassName}} implements GlobalResourceMapper<{{className}}> {
  {{#contextProviders}}
  /// Provider for context variable '{{value.variableName}}'
  final String Function() {{value.privateFieldName}};
  {{/contextProviders}}

  /// Constructor{{#hasContextProviders}} requiring providers for context variables{{/hasContextProviders}}
  const {{mapperClassName}}({{#hasContextProviders}}{
    {{#contextProviders}}
    required String Function() {{value.parameterName}},
    {{/contextProviders}}
  }{{/hasContextProviders}}){{#hasContextProviders}} : {{#contextProviders}}{{value.privateFieldName}} = {{value.parameterName}}{{^last}},
       {{/last}}{{/contextProviders}}{{/hasContextProviders}};

  @override
  IriTerm get typeIri => {{#hasTypeIri}}{{typeIri}}{{/hasTypeIri}}{{^hasTypeIri}}null{{/hasTypeIri}};

  @override
  {{className}} fromRdfResource(IriTerm subject, DeserializationContext context) {
    final reader = context.reader(subject);
    
    {{#iriStrategy}}
    // Extract IRI parts
    {{#hasTemplate}}
    final iriParts = _parseIriParts(subject.iri, '{{template.template}}', 
    [{{#template.variables}}'{{value}}'{{^last}}, {{/last}}{{/template.variables}}]);
    {{/hasTemplate}}
    {{^hasTemplate}}
    final iriParts = <String, String>{};
    {{/hasTemplate}}
    {{/iriStrategy}}
    
    {{#constructorParameters}}
    {{#isIriPart}}
    final {{name}} = {{#hasConverter}}{{converter}}.fromIri({{/hasConverter}}{{^hasConverter}}{{/hasConverter}}iriParts['{{iriPartName}}']{{#hasConverter}}){{/hasConverter}};
    {{/isIriPart}}
    {{#isRdfProperty}}
    final {{name}} = reader.{{#isRequired}}require{{/isRequired}}{{^isRequired}}get{{/isRequired}}<{{dartType}}>({{predicate}}){{#hasDefaultValue}} ?? {{defaultValue}}{{/hasDefaultValue}};
    {{/isRdfProperty}}
    {{/constructorParameters}}

    return {{className}}(
      {{#constructorParameters}}
      {{name}}: {{name}},
      {{/constructorParameters}}
    );
  }

  @override
  (IriTerm, List<Triple>) toRdfResource(
    {{className}} resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    {{#iriStrategy}}
    final subject = {{#hasTemplate}}IriTerm(_buildIri(resource)){{/hasTemplate}}{{^hasTemplate}}IriTerm('{{baseIri}}'){{/hasTemplate}};
    {{/iriStrategy}}
    
    final builder = context.resourceBuilder(subject);
    
    {{#properties}}
    {{#isRdfProperty}}
    {{#isRequired}}
    builder.addValue({{predicate}}, {{#hasConverter}}{{converter}}.toRdf({{/hasConverter}}resource.{{propertyName}}{{#hasConverter}}){{/hasConverter}});
    {{/isRequired}}
    {{^isRequired}}
    if (resource.{{propertyName}} != null) {
      builder.addValue({{predicate}}, {{#hasConverter}}{{converter}}.toRdf({{/hasConverter}}resource.{{propertyName}}{{#hasConverter}}){{/hasConverter}});
    }
    {{/isRequired}}
    {{/isRdfProperty}}
    {{/properties}}

    return builder.build();
  }

  {{#iriStrategy}}
  {{#hasTemplate}}
  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri({{className}} resource) {
    var iri = '{{template.template}}';
    {{#iriStrategy.template.propertyVariables}}
    iri = iri.replaceAll('{{value.placeholder}}', resource.{{value.variableName}}.toString());
    {{/iriStrategy.template.propertyVariables}}
    {{#contextProviders}}
    iri = iri.replaceAll('{{value.placeholder}}', {{value.privateFieldName}}());
    {{/contextProviders}}
    return iri;
  }

  /// Parses IRI parts from a complete IRI using a template.
  ///
  /// Supports RFC 6570 URI Template standard:
  /// - {variable} (default): excludes reserved characters like '/'
  /// - {+variable}: includes reserved characters for URLs/paths (RFC 6570 Level 2)
  Map<String, String> _parseIriParts(
      String iri, String template, List<String> variables) {
    // Convert template to regex pattern
    String regexPattern = RegExp.escape(template);

    // Replace variables with named capture groups
    for (final v in variables) {
      // Use named capture groups for cleaner variable extraction
      regexPattern = regexPattern
          .replaceAll('\\{\\+$v\\}', '(?<$v>.*)') // .* for +reserved expansion
          .replaceAll('\\{$v\\}', '(?<$v>[^/]*)'); // [^/]* for default
    }

    // Try to match the IRI against the regex pattern
    RegExp regex = RegExp('^$regexPattern\$');
    RegExpMatch? match = regex.firstMatch(iri);

    return match == null
        ? {}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
  }
  {{/hasTemplate}}
  {{/iriStrategy}}
}
