/// Generated mapper for [{{className}}] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type {{className}}.
class {{mapperClassName}} implements {{mapperInterfaceName}}<{{className}}> {
  {{#hasIriStrategy}}
  {{#iriStrategy}}
  {{#hasTemplate}}
  static final RegExp _regex = RegExp('{{template.regexPattern}}');
  {{/hasTemplate}}
  {{/iriStrategy}}
  {{/hasIriStrategy}}
  {{#contextProviders}}
  /// Provider for context variable '{{value.variableName}}'
  final String Function() {{value.privateFieldName}};
  {{/contextProviders}}

  {{#hasIriStrategyMapper}}
  final {{iriStrategy.mapper.type}} _iriMapper;
  {{/hasIriStrategyMapper}}

  /// Constructor{{#hasContextProviders}} requiring providers for context variables{{/hasContextProviders}}
  const {{mapperClassName}}({{#hasMapperConstructorParameters}}{
    {{#hasIriStrategyMapper}}
    required {{iriStrategy.mapper.type}} iriMapper
    {{/hasIriStrategyMapper}}
    {{#contextProviders}}
    {{#hasIriStrategyMapper}},{{/hasIriStrategyMapper}}
    required String Function() {{value.parameterName}},
    {{/contextProviders}}
  }{{/hasMapperConstructorParameters}}){{#hasMapperConstructorParameters}} : {{#hasIriStrategyMapper}}_iriMapper = iriMapper{{/hasIriStrategyMapper}}{{#contextProviders}}{{#hasIriStrategyMapper}},
       {{/hasIriStrategyMapper}}{{value.privateFieldName}} = {{value.parameterName}}{{^last}},
       {{/last}}{{/contextProviders}}{{/hasMapperConstructorParameters}};

  @override
  IriTerm? get typeIri => {{#hasTypeIri}}{{typeIri}}{{/hasTypeIri}}{{^hasTypeIri}}null{{/hasTypeIri}};

  @override
  {{className}} fromRdfResource({{termClass}} subject, DeserializationContext context) {
    {{#needsReader}}
    final reader = context.reader(subject);
    {{/needsReader}}

    {{#hasIriStrategy}}
    {{#iriStrategy}}
    // Extract IRI parts
    {{#hasTemplate}}
    final iriParts = _parseIriParts(subject.iri);
    {{/hasTemplate}}
    {{#hasMapper}}
    {{#hasIriMapperParts}}
    final ({{#iriMapperParts}}{{^value.isRdfProperty}}{{value.dartPropertyName}}, {{/value.isRdfProperty}}{{#value.isRdfProperty}}_ ,{{/value.isRdfProperty}}{{/iriMapperParts}}) = _iriMapper.fromRdfTerm(subject, context);
    {{/hasIriMapperParts}}
    {{/hasMapper}}
    {{/iriStrategy}}
    {{/hasIriStrategy}}
    
    {{#constructorParametersOrOtherFields}}
    {{^value.isRdfProperty}}
    {{#value.isIriPart}}
    {{#iriStrategy.hasTemplate}}
    final {{value.name}} = iriParts['{{value.iriPartName}}']{{#value.isRequired}}!{{/value.isRequired}}{{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/iriStrategy.hasTemplate}}
    {{/value.isIriPart}}
    {{/value.isRdfProperty}}
    {{#value.isRdfProperty}}
    final {{value.dartType}} {{value.name}} = reader.{{#value.isRequired}}require{{/value.isRequired}}{{^value.isRequired}}optional{{/value.isRequired}}({{value.predicate}}){{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/value.isRdfProperty}}
    {{/constructorParametersOrOtherFields}}

    final retval = {{className}}(
      {{#constructorParameters}}
      {{#value.isNamed}}{{value.name}}: {{/value.isNamed}}{{value.name}}{{^last}},{{/last}}
      {{/constructorParameters}}
    );
    {{#nonConstructorFields}}
    retval.{{value.name}} = {{value.name}};
    {{/nonConstructorFields}}
    return retval;
  }

  @override
  ({{termClass}}, List<Triple>) toRdfResource(
    {{className}} resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    {{#hasIriStrategy}}
    {{#iriStrategy}}
    {{#hasTemplate}}
    final subject = IriTerm(_buildIri(resource));
    {{/hasTemplate}}
    {{#hasMapper}}
    {{#hasIriMapperParts}}
    final subject = _iriMapper.toRdfTerm(({{#iriMapperParts}}resource.{{value.dartPropertyName}}, {{/iriMapperParts}}) , context);
    {{/hasIriMapperParts}}
    {{^hasIriMapperParts}}
    final subject = _iriMapper.toRdfTerm(resource, context);
    {{/hasIriMapperParts}}
    {{/hasMapper}}
    {{/iriStrategy}}
    {{/hasIriStrategy}}
    {{^hasIriStrategy}}
    final subject = BlankNodeTerm();
    {{/hasIriStrategy}}
    
    return context.resourceBuilder(subject)
    {{#properties}}
    {{#isRdfProperty}}
      .addValue{{^isRequired}}IfNotNull{{/isRequired}}({{predicate}}, resource.{{propertyName}})
    {{/isRdfProperty}}
    {{/properties}}
      .build();
  }

  {{#hasIriStrategy}}
  {{#iriStrategy}}
  {{#hasTemplate}}
  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri({{className}} resource) {
    var iri = '{{template.template}}';
    {{#template.propertyVariables}}
    iri = iri.replaceAll('{{value.placeholder}}', resource.{{value.variableName}}.toString());
    {{/template.propertyVariables}}
    {{#contextProviders}}
    iri = iri.replaceAll('{{value.placeholder}}', {{value.privateFieldName}}());
    {{/contextProviders}}
    return iri;
  }

  /// Parses IRI parts from a complete IRI using a template.
  ///
  /// Supports RFC 6570 URI Template standard:
  /// - {variable} (default): excludes reserved characters like '/'
  /// - {+variable}: includes reserved characters for URLs/paths (RFC 6570 Level 2)
  Map<String, String> _parseIriParts(String iri) {
    // Try to match the IRI against the regex pattern
    RegExpMatch? match = _regex.firstMatch(iri);

    return match == null
        ? {}
        : Map.fromEntries(match.groupNames.map((name) {
            var namedGroup = match.namedGroup(name)!;
            return MapEntry(name, namedGroup);
          }));
  }
  {{/hasTemplate}}
  {{/iriStrategy}}
  {{/hasIriStrategy}}
}
