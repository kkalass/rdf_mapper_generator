/// Generated mapper for [{{className}}] global resources.
/// 
/// This mapper handles serialization and deserialization between Dart objects
/// and RDF triples for resources of type {{className}}.
class {{mapperClassName}} implements {{mapperInterfaceName}} {
  {{#hasIriStrategy}}
  {{#iriStrategy}}
  {{#hasTemplate}}
  {{#requiresIriParsing}}
  static final RegExp _regex = RegExp('{{template.regexPattern}}');
  {{/requiresIriParsing}}
  {{/hasTemplate}}
  {{/iriStrategy}}
  {{/hasIriStrategy}}

  {{#mapperFields}}
  {{#value.isLate}}late {{/value.isLate}}{{#value.isFinal}}final{{/value.isFinal}} {{value.type}} {{value.name}};
  {{/mapperFields}}

    /// Constructor
  {{#mapperConstructor.isConst}}const {{/mapperConstructor.isConst}}{{mapperConstructor.className}}({{#mapperConstructor.hasParameters}}{
    {{#mapperConstructor.parameters}}
    {{^value.hasDefaultValue}}required {{/value.hasDefaultValue}}{{value.type}} {{value.parameterName}}{{#value.hasDefaultValue}} = {{value.defaultValue}}{{/value.hasDefaultValue}}{{^last}}, {{/last}}
    {{/mapperConstructor.parameters}}
  }{{/mapperConstructor.hasParameters}}){{#mapperConstructor.hasParameterAssignments}} : {{#mapperConstructor.parameterAssignments}}{{value.fieldName}} = {{value.parameterName}}{{^last}}, {{/last}}{{/mapperConstructor.parameterAssignments}}{{/mapperConstructor.hasParameterAssignments}}
  {{^mapperConstructor.hasBodyAssignments}};{{/mapperConstructor.hasBodyAssignments}}
  {{#mapperConstructor.hasBodyAssignments}}{ {{#mapperConstructor.bodyAssignments}}{{value.fieldName}} = {{value.defaultValue}};{{/mapperConstructor.bodyAssignments}}}{{/mapperConstructor.hasBodyAssignments}}

  @override
  IriTerm? get typeIri => {{#hasTypeIri}}{{typeIri}}{{/hasTypeIri}}{{^hasTypeIri}}null{{/hasTypeIri}};

  @override
  {{className}} fromRdfResource({{termClass}} subject, DeserializationContext context) {
    {{#needsReader}}
    final reader = context.reader(subject);
    {{/needsReader}}

    {{#hasIriStrategy}}
    {{#iriStrategy}}
    {{#hasTemplate}}
    {{#requiresIriParsing}}
    final RegExpMatch? match = _regex.firstMatch(subject.iri);

    final iriParts = {
      for (var name in (match?.groupNames ?? const <String>[]))
        name: match?.namedGroup(name) ?? '',
    };
    {{/requiresIriParsing}}
    {{/hasTemplate}}
    {{#hasMapper}}
    {{#hasIriMapperParts}}
    final ({{#iriMapperParts}}{{^value.isRdfProperty}}{{value.dartPropertyName}}, {{/value.isRdfProperty}}{{#value.isRdfProperty}}_ ,{{/value.isRdfProperty}}{{/iriMapperParts}}) = _iriMapper.fromRdfTerm(subject, context);
    {{/hasIriMapperParts}}
    {{/hasMapper}}
    {{/iriStrategy}}
    {{/hasIriStrategy}}
    
    {{#constructorParametersOrOtherFields}}
    {{^value.isRdfProperty}}
    {{#value.isIriPart}}
    {{#iriStrategy.hasTemplate}}
    final {{value.name}} = {{^iriStrategy.hasFullIriPartTemplate}}iriParts['{{value.iriPartName}}']{{#value.isRequired}}!{{/value.isRequired}}{{/iriStrategy.hasFullIriPartTemplate}}{{#iriStrategy.hasFullIriPartTemplate}}subject.iri{{/iriStrategy.hasFullIriPartTemplate}}{{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/iriStrategy.hasTemplate}}
    {{/value.isIriPart}}
    {{/value.isRdfProperty}}
    {{#value.isRdfProperty}}
    final {{value.dartType}} {{value.name}} = {{#value.isCollection}}{{/value.isCollection}}reader.{{value.readerMethod}}({{value.predicate}}{{#value.hasMapper}}, {{value.mapperParameterDeserializer}}: {{value.mapperDeserializerCode}}{{/value.hasMapper}}){{#value.isCollection}}{{#value.isList}}.toList(){{/value.isList}}{{#value.isSet}}.toSet(){{/value.isSet}}{{/value.isCollection}}{{#value.hasDefaultValue}} ?? {{value.defaultValue}}{{/value.hasDefaultValue}};
    {{/value.isRdfProperty}}
    {{/constructorParametersOrOtherFields}}

    {{#hasNonConstructorFields}}final retval = {{/hasNonConstructorFields}}{{^hasNonConstructorFields}}return {{/hasNonConstructorFields}}{{className}}(
      {{#constructorParameters}}
      {{#value.isNamed}}{{value.name}}: {{/value.isNamed}}{{value.name}}{{^last}},{{/last}}
      {{/constructorParameters}}
    );
    {{#hasNonConstructorFields}}
    {{#nonConstructorFields}}
    retval.{{value.name}} = {{value.name}};
    {{/nonConstructorFields}}
    return retval;
    {{/hasNonConstructorFields}}
  }

  @override
  ({{termClass}}, List<Triple>) toRdfResource(
    {{className}} resource,
    SerializationContext context, {
    RdfSubject? parentSubject,
  }) {
    {{#hasIriStrategy}}
    {{#iriStrategy}}
    {{#hasTemplate}}
    final subject = IriTerm({{^hasFullIriPartTemplate}}_buildIri(resource){{/hasFullIriPartTemplate}}{{#hasFullIriPartTemplate}}resource.{{#template.propertyVariables}}{{value.variableName}}{{^value.isString}}.toString(){{/value.isString}}{{/template.propertyVariables}}{{/hasFullIriPartTemplate}});
    {{/hasTemplate}}
    {{#hasMapper}}
    {{#hasIriMapperParts}}
    final subject = _iriMapper.toRdfTerm(({{#iriMapperParts}}resource.{{value.dartPropertyName}}, {{/iriMapperParts}}) , context);
    {{/hasIriMapperParts}}
    {{^hasIriMapperParts}}
    final subject = _iriMapper.toRdfTerm(resource, context);
    {{/hasIriMapperParts}}
    {{/hasMapper}}
    {{/iriStrategy}}
    {{/hasIriStrategy}}
    {{^hasIriStrategy}}
    final subject = BlankNodeTerm();
    {{/hasIriStrategy}}
    
    return context.resourceBuilder(subject)
    {{#properties}}
    {{#isRdfProperty}}
    {{#include}}
    {{#useConditionalSerialization}}
      .when(resource.{{propertyName}} != {{defaultValue}}, (b) => b.{{serializerMethod}}{{#useOptionalSerialization}}IfNotNull{{/useOptionalSerialization}}({{predicate}}, resource.{{propertyName}}{{#hasMapper}}, {{mapperParameterSerializer}}: {{mapperSerializerCode}}{{/hasMapper}}))
    {{/useConditionalSerialization}}
    {{^useConditionalSerialization}}
      .{{serializerMethod}}{{#useOptionalSerialization}}IfNotNull{{/useOptionalSerialization}}({{predicate}}, resource.{{propertyName}}{{#hasMapper}}, {{mapperParameterSerializer}}: {{mapperSerializerCode}}{{/hasMapper}})
    {{/useConditionalSerialization}}
    {{/include}}
    {{/isRdfProperty}}
    {{/properties}}
      .build();
  }

  {{#hasIriStrategy}}
  {{#iriStrategy}}
  {{#hasTemplate}}
  {{^hasFullIriPartTemplate}}
  /// Builds the IRI for a resource instance using the IRI template.
  String _buildIri({{className}} resource) {
    {{#template.propertyVariables}}
    final {{value.variableName}} = resource.{{value.variableName}}{{^value.isString}}.toString(){{/value.isString}};
    {{/template.propertyVariables}}
    {{#template.contextVariables}}
    final {{value.variableName}} = {{value.code}};
    {{/template.contextVariables}}
    return '{{template.interpolatedTemplate}}';
  }
  {{/hasFullIriPartTemplate}}
  {{/hasTemplate}}
  {{/iriStrategy}}
  {{/hasIriStrategy}}
}
